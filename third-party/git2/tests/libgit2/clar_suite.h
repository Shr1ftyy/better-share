#ifndef _____clar_suite_h_____
#define _____clar_suite_h_____
extern void test_apply_both__generated_diff(void);
extern void test_apply_both__parsed_diff(void);
extern void test_apply_both__removes_file(void);
extern void test_apply_both__adds_file(void);
extern void test_apply_both__application_failure_leaves_index_unmodified(void);
extern void test_apply_both__index_must_match_workdir(void);
extern void test_apply_both__index_mode_must_match_workdir(void);
extern void test_apply_both__application_failure_leaves_workdir_unmodified(void);
extern void test_apply_both__keeps_nonconflicting_changes(void);
extern void test_apply_both__can_apply_nonconflicting_file_changes(void);
extern void test_apply_both__honors_crlf_attributes(void);
extern void test_apply_both__rename(void);
extern void test_apply_both__rename_and_modify(void);
extern void test_apply_both__rename_a_to_b_to_c(void);
extern void test_apply_both__rename_a_to_b_to_c_exact(void);
extern void test_apply_both__rename_circular(void);
extern void test_apply_both__rename_2_to_1(void);
extern void test_apply_both__rename_1_to_2(void);
extern void test_apply_both__two_deltas_one_file(void);
extern void test_apply_both__two_deltas_one_new_file(void);
extern void test_apply_both__rename_and_modify_deltas(void);
extern void test_apply_both__rename_delta_after_modify_delta(void);
extern void test_apply_both__cant_rename_after_modify_nonexistent_target_path(void);
extern void test_apply_both__cant_modify_source_path_after_rename(void);
extern void test_apply_both__readd_deleted_file(void);
extern void test_apply_both__cant_remove_file_twice(void);
extern void test_apply_both__cant_add_invalid_filename(void);
extern void test_apply_both__initialize(void);
extern void test_apply_both__cleanup(void);
extern void test_apply_callbacks__delta_aborts(void);
extern void test_apply_callbacks__delta_can_skip(void);
extern void test_apply_callbacks__hunk_can_skip(void);
extern void test_apply_callbacks__initialize(void);
extern void test_apply_callbacks__cleanup(void);
extern void test_apply_check__generate_diff(void);
extern void test_apply_check__parsed_diff(void);
extern void test_apply_check__binary(void);
extern void test_apply_check__does_not_apply(void);
extern void test_apply_check__initialize(void);
extern void test_apply_check__cleanup(void);
extern void test_apply_fromdiff__change_middle(void);
extern void test_apply_fromdiff__change_middle_nocontext(void);
extern void test_apply_fromdiff__change_firstline(void);
extern void test_apply_fromdiff__lastline(void);
extern void test_apply_fromdiff__change_middle_and_lastline_nocontext(void);
extern void test_apply_fromdiff__prepend(void);
extern void test_apply_fromdiff__prepend_nocontext(void);
extern void test_apply_fromdiff__prepend_and_change(void);
extern void test_apply_fromdiff__prepend_and_change_nocontext(void);
extern void test_apply_fromdiff__delete_and_change(void);
extern void test_apply_fromdiff__delete_and_change_nocontext(void);
extern void test_apply_fromdiff__delete_firstline(void);
extern void test_apply_fromdiff__append(void);
extern void test_apply_fromdiff__append_nocontext(void);
extern void test_apply_fromdiff__prepend_and_append(void);
extern void test_apply_fromdiff__to_empty_file(void);
extern void test_apply_fromdiff__from_empty_file(void);
extern void test_apply_fromdiff__add(void);
extern void test_apply_fromdiff__delete(void);
extern void test_apply_fromdiff__no_change(void);
extern void test_apply_fromdiff__binary_add(void);
extern void test_apply_fromdiff__binary_no_change(void);
extern void test_apply_fromdiff__binary_change_delta(void);
extern void test_apply_fromdiff__binary_change_literal(void);
extern void test_apply_fromdiff__binary_delete(void);
extern void test_apply_fromdiff__patching_correctly_truncates_source(void);
extern void test_apply_fromdiff__initialize(void);
extern void test_apply_fromdiff__cleanup(void);
extern void test_apply_fromfile__change_middle(void);
extern void test_apply_fromfile__change_middle_nocontext(void);
extern void test_apply_fromfile__change_firstline(void);
extern void test_apply_fromfile__lastline(void);
extern void test_apply_fromfile__change_middle_shrink(void);
extern void test_apply_fromfile__change_middle_shrink_nocontext(void);
extern void test_apply_fromfile__change_middle_grow(void);
extern void test_apply_fromfile__change_middle_grow_nocontext(void);
extern void test_apply_fromfile__prepend(void);
extern void test_apply_fromfile__prepend_nocontext(void);
extern void test_apply_fromfile__append(void);
extern void test_apply_fromfile__append_nocontext(void);
extern void test_apply_fromfile__prepend_and_append(void);
extern void test_apply_fromfile__to_empty_file(void);
extern void test_apply_fromfile__from_empty_file(void);
extern void test_apply_fromfile__add(void);
extern void test_apply_fromfile__delete(void);
extern void test_apply_fromfile__rename_exact(void);
extern void test_apply_fromfile__rename_similar(void);
extern void test_apply_fromfile__rename_similar_quotedname(void);
extern void test_apply_fromfile__modechange(void);
extern void test_apply_fromfile__modechange_with_modification(void);
extern void test_apply_fromfile__noisy(void);
extern void test_apply_fromfile__noisy_nocontext(void);
extern void test_apply_fromfile__fail_truncated_1(void);
extern void test_apply_fromfile__fail_truncated_2(void);
extern void test_apply_fromfile__fail_truncated_3(void);
extern void test_apply_fromfile__fail_corrupt_githeader(void);
extern void test_apply_fromfile__empty_context(void);
extern void test_apply_fromfile__append_no_nl(void);
extern void test_apply_fromfile__fail_missing_new_file(void);
extern void test_apply_fromfile__fail_missing_old_file(void);
extern void test_apply_fromfile__fail_no_changes(void);
extern void test_apply_fromfile__fail_missing_hunk_header(void);
extern void test_apply_fromfile__fail_not_a_patch(void);
extern void test_apply_fromfile__binary_add(void);
extern void test_apply_fromfile__binary_change_delta(void);
extern void test_apply_fromfile__binary_change_literal(void);
extern void test_apply_fromfile__binary_delete(void);
extern void test_apply_fromfile__binary_change_does_not_apply(void);
extern void test_apply_fromfile__binary_change_must_be_reversible(void);
extern void test_apply_fromfile__empty_file_not_allowed(void);
extern void test_apply_fromfile__initialize(void);
extern void test_apply_fromfile__cleanup(void);
extern void test_apply_index__generate_diff(void);
extern void test_apply_index__parsed_diff(void);
extern void test_apply_index__removes_file(void);
extern void test_apply_index__adds_file(void);
extern void test_apply_index__modified_workdir_with_unmodified_index_is_ok(void);
extern void test_apply_index__application_failure_leaves_index_unmodified(void);
extern void test_apply_index__keeps_nonconflicting_changes(void);
extern void test_apply_index__can_apply_nonconflicting_file_changes(void);
extern void test_apply_index__change_mode(void);
extern void test_apply_index__initialize(void);
extern void test_apply_index__cleanup(void);
extern void test_apply_partial__prepend_and_change_skip_addition(void);
extern void test_apply_partial__prepend_and_change_nocontext_skip_addition(void);
extern void test_apply_partial__prepend_and_change_nocontext_abort_addition(void);
extern void test_apply_partial__prepend_and_change_skip_change(void);
extern void test_apply_partial__prepend_and_change_nocontext_skip_change(void);
extern void test_apply_partial__prepend_and_change_nocontext_abort_change(void);
extern void test_apply_partial__delete_and_change_skip_deletion(void);
extern void test_apply_partial__delete_and_change_nocontext_skip_deletion(void);
extern void test_apply_partial__delete_and_change_nocontext_abort_deletion(void);
extern void test_apply_partial__delete_and_change_skip_change(void);
extern void test_apply_partial__delete_and_change_nocontext_skip_change(void);
extern void test_apply_partial__delete_and_change_nocontext_abort_change(void);
extern void test_apply_partial__initialize(void);
extern void test_apply_partial__cleanup(void);
extern void test_apply_tree__one(void);
extern void test_apply_tree__adds_file(void);
extern void test_apply_tree__initialize(void);
extern void test_apply_tree__cleanup(void);
extern void test_apply_workdir__generated_diff(void);
extern void test_apply_workdir__parsed_diff(void);
extern void test_apply_workdir__removes_file(void);
extern void test_apply_workdir__adds_file(void);
extern void test_apply_workdir__modified_index_with_unmodified_workdir_is_ok(void);
extern void test_apply_workdir__application_failure_leaves_workdir_unmodified(void);
extern void test_apply_workdir__keeps_nonconflicting_changes(void);
extern void test_apply_workdir__can_apply_nonconflicting_file_changes(void);
extern void test_apply_workdir__change_mode(void);
extern void test_apply_workdir__apply_many_changes_one(void);
extern void test_apply_workdir__apply_many_changes_two(void);
extern void test_apply_workdir__initialize(void);
extern void test_apply_workdir__cleanup(void);
extern void test_attr_file__simple_read(void);
extern void test_attr_file__match_variants(void);
extern void test_attr_file__assign_variants(void);
extern void test_attr_file__check_attr_examples(void);
extern void test_attr_file__whitespace(void);
extern void test_attr_flags__bare(void);
extern void test_attr_flags__index_vs_workdir(void);
extern void test_attr_flags__subdir(void);
extern void test_attr_flags__cleanup(void);
extern void test_attr_lookup__simple(void);
extern void test_attr_lookup__match_variants(void);
extern void test_attr_lookup__assign_variants(void);
extern void test_attr_lookup__check_attr_examples(void);
extern void test_attr_lookup__from_buffer(void);
extern void test_attr_macro__macros(void);
extern void test_attr_macro__bad_macros(void);
extern void test_attr_macro__macros_in_root_wd_apply(void);
extern void test_attr_macro__changing_macro_in_root_wd_updates_attributes(void);
extern void test_attr_macro__macros_in_subdir_do_not_apply(void);
extern void test_attr_macro__adding_macro_succeeds(void);
extern void test_attr_macro__adding_boolean_macros_succeeds(void);
extern void test_attr_macro__redefining_macro_succeeds(void);
extern void test_attr_macro__recursive_macro_resolves(void);
extern void test_attr_macro__cleanup(void);
extern void test_attr_repo__get_one(void);
extern void test_attr_repo__get_one_start_deep(void);
extern void test_attr_repo__get_many(void);
extern void test_attr_repo__get_many_in_place(void);
extern void test_attr_repo__foreach(void);
extern void test_attr_repo__manpage_example(void);
extern void test_attr_repo__staging_properly_normalizes_line_endings_according_to_gitattributes_directives(void);
extern void test_attr_repo__bare_repo_with_index(void);
extern void test_attr_repo__inmemory_repo_without_index(void);
extern void test_attr_repo__sysdir(void);
extern void test_attr_repo__sysdir_with_session(void);
extern void test_attr_repo__rewrite(void);
extern void test_attr_repo__rewrite_sysdir(void);
extern void test_attr_repo__unlink(void);
extern void test_attr_repo__initialize(void);
extern void test_attr_repo__cleanup(void);
extern void test_blame_buffer__4_edits(void);
extern void test_blame_buffer__two_added_lines_and_one_modified(void);
extern void test_blame_buffer__two_added_lines(void);
extern void test_blame_buffer__added_blocks(void);
extern void test_blame_buffer__overlapping_blocks(void);
extern void test_blame_buffer__2_add_splits_hunk(void);
extern void test_blame_buffer__index(void);
extern void test_blame_buffer__added_line(void);
extern void test_blame_buffer__added_lines(void);
extern void test_blame_buffer__deleted_line(void);
extern void test_blame_buffer__add_splits_hunk(void);
extern void test_blame_buffer__delete_crosses_hunk_boundary(void);
extern void test_blame_buffer__replace_line(void);
extern void test_blame_buffer__add_lines_at_end(void);
extern void test_blame_buffer__initialize(void);
extern void test_blame_buffer__cleanup(void);
extern void test_blame_getters__byindex(void);
extern void test_blame_getters__byline(void);
extern void test_blame_getters__initialize(void);
extern void test_blame_getters__cleanup(void);
extern void test_blame_harder__m(void);
extern void test_blame_harder__c(void);
extern void test_blame_harder__cc(void);
extern void test_blame_harder__ccc(void);
extern void test_blame_harder__initialize(void);
extern void test_blame_harder__cleanup(void);
extern void test_blame_simple__trivial_testrepo(void);
extern void test_blame_simple__trivial_blamerepo(void);
extern void test_blame_simple__trivial_libgit2(void);
extern void test_blame_simple__trivial_libgit2_under_cache_pressure(void);
extern void test_blame_simple__can_restrict_lines_min(void);
extern void test_blame_simple__can_ignore_whitespace_change(void);
extern void test_blame_simple__can_restrict_lines_max(void);
extern void test_blame_simple__can_restrict_lines_both(void);
extern void test_blame_simple__can_blame_huge_file(void);
extern void test_blame_simple__can_restrict_to_newish_commits(void);
extern void test_blame_simple__can_restrict_to_first_parent_commits(void);
extern void test_blame_simple__initialize(void);
extern void test_blame_simple__cleanup(void);
extern void test_checkout_binaryunicode__noautocrlf(void);
extern void test_checkout_binaryunicode__autocrlf(void);
extern void test_checkout_binaryunicode__initialize(void);
extern void test_checkout_binaryunicode__cleanup(void);
extern void test_checkout_conflict__ignored(void);
extern void test_checkout_conflict__ours(void);
extern void test_checkout_conflict__theirs(void);
extern void test_checkout_conflict__diff3(void);
extern void test_checkout_conflict__automerge(void);
extern void test_checkout_conflict__directory_file(void);
extern void test_checkout_conflict__directory_file_with_custom_labels(void);
extern void test_checkout_conflict__link_file(void);
extern void test_checkout_conflict__links(void);
extern void test_checkout_conflict__add_add(void);
extern void test_checkout_conflict__mode_change(void);
extern void test_checkout_conflict__renames(void);
extern void test_checkout_conflict__rename_keep_ours(void);
extern void test_checkout_conflict__name_mangled_file_exists_in_workdir(void);
extern void test_checkout_conflict__update_only(void);
extern void test_checkout_conflict__path_filters(void);
extern void test_checkout_conflict__report_progress(void);
extern void test_checkout_conflict__initialize(void);
extern void test_checkout_conflict__cleanup(void);
extern void test_checkout_crlf__matches_core_git(void);
extern void test_checkout_crlf__detect_crlf_autocrlf_false(void);
extern void test_checkout_crlf__autocrlf_false_index_size_is_unfiltered_size(void);
extern void test_checkout_crlf__detect_crlf_autocrlf_true(void);
extern void test_checkout_crlf__detect_crlf_autocrlf_true_utf8(void);
extern void test_checkout_crlf__autocrlf_true_index_size_is_filtered_size(void);
extern void test_checkout_crlf__with_ident(void);
extern void test_checkout_crlf__autocrlf_false_no_attrs(void);
extern void test_checkout_crlf__autocrlf_true_no_attrs(void);
extern void test_checkout_crlf__autocrlf_input_no_attrs(void);
extern void test_checkout_crlf__autocrlf_false_text_auto_attr(void);
extern void test_checkout_crlf__autocrlf_true_text_auto_attr(void);
extern void test_checkout_crlf__autocrlf_input_text_auto_attr(void);
extern void test_checkout_crlf__can_write_empty_file(void);
extern void test_checkout_crlf__initialize(void);
extern void test_checkout_crlf__cleanup(void);
extern void test_checkout_head__unborn_head_returns_GIT_EUNBORNBRANCH(void);
extern void test_checkout_head__with_index_only_tree(void);
extern void test_checkout_head__do_not_remove_untracked_file(void);
extern void test_checkout_head__do_not_remove_untracked_file_in_subdir(void);
extern void test_checkout_head__do_remove_untracked_paths(void);
extern void test_checkout_head__do_remove_tracked_subdir(void);
extern void test_checkout_head__typechange_workdir(void);
extern void test_checkout_head__typechange_index_and_workdir(void);
extern void test_checkout_head__workdir_filemode_is_simplified(void);
extern void test_checkout_head__obeys_filemode_true(void);
extern void test_checkout_head__obeys_filemode_false(void);
extern void test_checkout_head__initialize(void);
extern void test_checkout_head__cleanup(void);
extern void test_checkout_icase__refuses_to_overwrite_files_for_files(void);
extern void test_checkout_icase__overwrites_files_for_files_when_forced(void);
extern void test_checkout_icase__refuses_to_overwrite_links_for_files(void);
extern void test_checkout_icase__overwrites_links_for_files_when_forced(void);
extern void test_checkout_icase__overwrites_empty_folders_for_files(void);
extern void test_checkout_icase__refuses_to_overwrite_populated_folders_for_files(void);
extern void test_checkout_icase__overwrites_folders_for_files_when_forced(void);
extern void test_checkout_icase__refuses_to_overwrite_files_for_folders(void);
extern void test_checkout_icase__overwrites_files_for_folders_when_forced(void);
extern void test_checkout_icase__refuses_to_overwrite_links_for_folders(void);
extern void test_checkout_icase__overwrites_links_for_folders_when_forced(void);
extern void test_checkout_icase__ignores_unstaged_casechange(void);
extern void test_checkout_icase__conflicts_with_casechanged_subtrees(void);
extern void test_checkout_icase__initialize(void);
extern void test_checkout_icase__cleanup(void);
extern void test_checkout_index__cannot_checkout_a_bare_repository(void);
extern void test_checkout_index__can_create_missing_files(void);
extern void test_checkout_index__can_remove_untracked_files(void);
extern void test_checkout_index__can_disable_pathspec_match(void);
extern void test_checkout_index__honor_the_specified_pathspecs(void);
extern void test_checkout_index__honor_the_gitattributes_directives(void);
extern void test_checkout_index__honor_coreautocrlf_setting_set_to_true(void);
extern void test_checkout_index__honor_coresymlinks_default_true(void);
extern void test_checkout_index__honor_coresymlinks_default_false(void);
extern void test_checkout_index__coresymlinks_set_to_true_fails_when_unsupported(void);
extern void test_checkout_index__honor_coresymlinks_setting_set_to_true(void);
extern void test_checkout_index__honor_coresymlinks_setting_set_to_false(void);
extern void test_checkout_index__donot_overwrite_modified_file_by_default(void);
extern void test_checkout_index__can_overwrite_modified_file(void);
extern void test_checkout_index__options_disable_filters(void);
extern void test_checkout_index__options_dir_modes(void);
extern void test_checkout_index__options_override_file_modes(void);
extern void test_checkout_index__options_open_flags(void);
extern void test_checkout_index__can_notify_of_skipped_files(void);
extern void test_checkout_index__wont_notify_of_expected_line_ending_changes(void);
extern void test_checkout_index__calls_progress_callback(void);
extern void test_checkout_index__can_overcome_name_clashes(void);
extern void test_checkout_index__validates_struct_version(void);
extern void test_checkout_index__can_update_prefixed_files(void);
extern void test_checkout_index__can_checkout_a_newly_initialized_repository(void);
extern void test_checkout_index__issue_1397(void);
extern void test_checkout_index__target_directory(void);
extern void test_checkout_index__target_directory_from_bare(void);
extern void test_checkout_index__can_get_repo_from_index(void);
extern void test_checkout_index__writes_conflict_file(void);
extern void test_checkout_index__adding_conflict_removes_stage_0(void);
extern void test_checkout_index__conflicts_honor_coreautocrlf(void);
extern void test_checkout_index__initialize(void);
extern void test_checkout_index__cleanup(void);
extern void test_checkout_nasty__dotgit_tree(void);
extern void test_checkout_nasty__dotcapitalgit_tree(void);
extern void test_checkout_nasty__dot_tree(void);
extern void test_checkout_nasty__dot_dotgit_tree(void);
extern void test_checkout_nasty__dotdot_dotgit_tree(void);
extern void test_checkout_nasty__dotdot_tree(void);
extern void test_checkout_nasty__dotgit_path(void);
extern void test_checkout_nasty__dotcapitalgit_path(void);
extern void test_checkout_nasty__dot_dotgit_path(void);
extern void test_checkout_nasty__dot_dotcapitalgit_path(void);
extern void test_checkout_nasty__dotdot_dotgit_path(void);
extern void test_checkout_nasty__dotdot_dotcapitalgit_path(void);
extern void test_checkout_nasty__dot_path(void);
extern void test_checkout_nasty__dot_path_two(void);
extern void test_checkout_nasty__dotdot_path(void);
extern void test_checkout_nasty__dotgit_backslash_path(void);
extern void test_checkout_nasty__dotcapitalgit_backslash_path(void);
extern void test_checkout_nasty__dot_backslash_dotcapitalgit_path(void);
extern void test_checkout_nasty__dot_git_dot(void);
extern void test_checkout_nasty__git_tilde1(void);
extern void test_checkout_nasty__git_custom_shortname(void);
extern void test_checkout_nasty__only_looks_like_a_git_shortname(void);
extern void test_checkout_nasty__dot_git_colon(void);
extern void test_checkout_nasty__dot_git_colon_stuff(void);
extern void test_checkout_nasty__dotgit_alternate_data_stream(void);
extern void test_checkout_nasty__dot_git_hfs_ignorable(void);
extern void test_checkout_nasty__honors_core_protecthfs(void);
extern void test_checkout_nasty__honors_core_protectntfs(void);
extern void test_checkout_nasty__symlink1(void);
extern void test_checkout_nasty__symlink2(void);
extern void test_checkout_nasty__symlink3(void);
extern void test_checkout_nasty__gitmodules_symlink(void);
extern void test_checkout_nasty__initialize(void);
extern void test_checkout_nasty__cleanup(void);
extern void test_checkout_tree__cannot_checkout_a_non_treeish(void);
extern void test_checkout_tree__can_checkout_a_subdirectory_from_a_commit(void);
extern void test_checkout_tree__can_checkout_and_remove_directory(void);
extern void test_checkout_tree__can_checkout_a_subdirectory_from_a_subtree(void);
extern void test_checkout_tree__calls_progress_callback(void);
extern void test_checkout_tree__doesnt_write_unrequested_files_to_worktree(void);
extern void test_checkout_tree__can_switch_branches(void);
extern void test_checkout_tree__can_remove_untracked(void);
extern void test_checkout_tree__can_remove_ignored(void);
extern void test_checkout_tree__conflict_on_ignored_when_not_overwriting(void);
extern void test_checkout_tree__can_overwrite_ignored_by_default(void);
extern void test_checkout_tree__conflict_on_ignored_folder_when_not_overwriting(void);
extern void test_checkout_tree__can_overwrite_ignored_folder_by_default(void);
extern void test_checkout_tree__can_update_only(void);
extern void test_checkout_tree__can_checkout_with_pattern(void);
extern void test_checkout_tree__pathlist_checkout_ignores_non_matches(void);
extern void test_checkout_tree__can_disable_pattern_match(void);
extern void test_checkout_tree__checking_out_a_conflicting_type_change_returns_ECONFLICT(void);
extern void test_checkout_tree__checking_out_a_conflicting_type_change_returns_ECONFLICT_2(void);
extern void test_checkout_tree__checking_out_a_conflicting_content_change_returns_ECONFLICT(void);
extern void test_checkout_tree__donot_update_deleted_file_by_default(void);
extern void test_checkout_tree__can_cancel_checkout_from_notify(void);
extern void test_checkout_tree__can_checkout_with_last_workdir_item_missing(void);
extern void test_checkout_tree__issue_1397(void);
extern void test_checkout_tree__can_write_to_empty_dirs(void);
extern void test_checkout_tree__fails_when_dir_in_use(void);
extern void test_checkout_tree__can_continue_when_dir_in_use(void);
extern void test_checkout_tree__target_directory_from_bare(void);
extern void test_checkout_tree__extremely_long_file_name(void);
extern void test_checkout_tree__fails_when_conflicts_exist_in_index(void);
extern void test_checkout_tree__filemode_preserved_in_index(void);
extern void test_checkout_tree__filemode_preserved_in_workdir(void);
extern void test_checkout_tree__removes_conflicts(void);
extern void test_checkout_tree__removes_conflicts_only_by_pathscope(void);
extern void test_checkout_tree__case_changing_rename(void);
extern void test_checkout_tree__can_collect_perfdata(void);
extern void test_checkout_tree__caches_attributes_during_checkout(void);
extern void test_checkout_tree__can_not_update_index(void);
extern void test_checkout_tree__can_update_but_not_write_index(void);
extern void test_checkout_tree__safe_proceeds_if_no_index(void);
extern void test_checkout_tree__baseline_is_empty_when_no_index(void);
extern void test_checkout_tree__mode_change_is_force_updated(void);
extern void test_checkout_tree__nullopts(void);
extern void test_checkout_tree__retains_external_index_changes(void);
extern void test_checkout_tree__no_index_refresh(void);
extern void test_checkout_tree__dry_run(void);
extern void test_checkout_tree__initialize(void);
extern void test_checkout_tree__cleanup(void);
extern void test_checkout_typechange__checkout_typechanges_safe(void);
extern void test_checkout_typechange__checkout_with_conflicts(void);
extern void test_checkout_typechange__status_char(void);
extern void test_checkout_typechange__initialize(void);
extern void test_checkout_typechange__cleanup(void);
extern void test_cherrypick_bare__automerge(void);
extern void test_cherrypick_bare__conflicts(void);
extern void test_cherrypick_bare__orphan(void);
extern void test_cherrypick_bare__initialize(void);
extern void test_cherrypick_bare__cleanup(void);
extern void test_cherrypick_workdir__automerge(void);
extern void test_cherrypick_workdir__empty_result(void);
extern void test_cherrypick_workdir__conflicts(void);
extern void test_cherrypick_workdir__conflict_use_ours(void);
extern void test_cherrypick_workdir__rename(void);
extern void test_cherrypick_workdir__both_renamed(void);
extern void test_cherrypick_workdir__nonmerge_fails_mainline_specified(void);
extern void test_cherrypick_workdir__merge_fails_without_mainline_specified(void);
extern void test_cherrypick_workdir__merge_first_parent(void);
extern void test_cherrypick_workdir__merge_second_parent(void);
extern void test_cherrypick_workdir__initialize(void);
extern void test_cherrypick_workdir__cleanup(void);
extern void test_clone_empty__can_clone_an_empty_local_repo_barely(void);
extern void test_clone_empty__respects_initialbranch_config(void);
extern void test_clone_empty__can_clone_an_empty_local_repo(void);
extern void test_clone_empty__can_clone_an_empty_standard_repo(void);
extern void test_clone_empty__initialize(void);
extern void test_clone_empty__cleanup(void);
extern void test_clone_local__should_clone_local(void);
extern void test_clone_local__hardlinks(void);
extern void test_clone_local__standard_unc_paths_are_written_git_style(void);
extern void test_clone_local__git_style_unc_paths(void);
extern void test_clone_local__shallow_fails(void);
extern void test_clone_nonetwork__bad_urls(void);
extern void test_clone_nonetwork__do_not_clean_existing_directory(void);
extern void test_clone_nonetwork__local(void);
extern void test_clone_nonetwork__local_absolute_path(void);
extern void test_clone_nonetwork__local_bare(void);
extern void test_clone_nonetwork__fail_when_the_target_is_a_file(void);
extern void test_clone_nonetwork__fail_with_already_existing_but_non_empty_directory(void);
extern void test_clone_nonetwork__custom_origin_name(void);
extern void test_clone_nonetwork__defaults(void);
extern void test_clone_nonetwork__cope_with_already_existing_directory(void);
extern void test_clone_nonetwork__can_prevent_the_checkout_of_a_standard_repo(void);
extern void test_clone_nonetwork__can_checkout_given_branch(void);
extern void test_clone_nonetwork__can_cancel_clone_in_fetch(void);
extern void test_clone_nonetwork__can_cancel_clone_in_checkout(void);
extern void test_clone_nonetwork__can_detached_head(void);
extern void test_clone_nonetwork__clone_tag_to_tree(void);
extern void test_clone_nonetwork__clone_updates_reflog_properly(void);
extern void test_clone_nonetwork__clone_from_empty_sets_upstream(void);
extern void test_clone_nonetwork__initialize(void);
extern void test_clone_nonetwork__cleanup(void);
extern void test_clone_transport__custom_transport(void);
extern void test_commit_commit__create_unexisting_update_ref(void);
extern void test_commit_commit__create_initial_commit(void);
extern void test_commit_commit__create_initial_commit_parent_not_current(void);
extern void test_commit_commit__summary(void);
extern void test_commit_commit__body(void);
extern void test_commit_commit__initialize(void);
extern void test_commit_commit__cleanup(void);
extern void test_commit_create__from_stage_simple(void);
extern void test_commit_create__from_stage_nochanges(void);
extern void test_commit_create__from_stage_newrepo(void);
extern void test_commit_create__initialize(void);
extern void test_commit_create__cleanup(void);
extern void test_commit_parent__can_retrieve_nth_generation_parent(void);
extern void test_commit_parent__initialize(void);
extern void test_commit_parent__cleanup(void);
extern void test_commit_parse__header(void);
extern void test_commit_parse__signature(void);
extern void test_commit_parse__entire_commit(void);
extern void test_commit_parse__details0(void);
extern void test_commit_parse__leading_lf(void);
extern void test_commit_parse__only_lf(void);
extern void test_commit_parse__arbitrary_field(void);
extern void test_commit_parse__extract_signature(void);
extern void test_commit_parse__initialize(void);
extern void test_commit_parse__cleanup(void);
extern void test_commit_signature__leading_and_trailing_spaces_are_trimmed(void);
extern void test_commit_signature__leading_and_trailing_dots_are_supported(void);
extern void test_commit_signature__leading_and_trailing_crud_is_trimmed(void);
extern void test_commit_signature__timezone_does_not_read_oob(void);
extern void test_commit_signature__angle_brackets_in_names_are_not_supported(void);
extern void test_commit_signature__angle_brackets_in_email_are_not_supported(void);
extern void test_commit_signature__create_empties(void);
extern void test_commit_signature__create_one_char(void);
extern void test_commit_signature__create_two_char(void);
extern void test_commit_signature__create_zero_char(void);
extern void test_commit_signature__from_buf(void);
extern void test_commit_signature__from_buf_with_neg_zero_offset(void);
extern void test_commit_signature__pos_and_neg_zero_offsets_dont_match(void);
extern void test_commit_signature__from_env(void);
extern void test_commit_signature__initialize(void);
extern void test_commit_signature__cleanup(void);
extern void test_commit_write__from_memory(void);
extern void test_commit_write__into_buf(void);
extern void test_commit_write__root(void);
extern void test_commit_write__can_write_invalid_objects(void);
extern void test_commit_write__can_validate_objects(void);
extern void test_commit_write__attach_signature_checks_objects(void);
extern void test_commit_write__attach_singleline_signature(void);
extern void test_commit_write__attach_multiline_signature(void);
extern void test_commit_write__initialize(void);
extern void test_commit_write__cleanup(void);
extern void test_config_add__to_existing_section(void);
extern void test_config_add__to_new_section(void);
extern void test_config_add__initialize(void);
extern void test_config_add__cleanup(void);
extern void test_config_backend__checks_version(void);
extern void test_config_conditionals__gitdir(void);
extern void test_config_conditionals__gitdir_i(void);
extern void test_config_conditionals__invalid_conditional_fails(void);
extern void test_config_conditionals__onbranch(void);
extern void test_config_conditionals__empty(void);
extern void test_config_conditionals__initialize(void);
extern void test_config_conditionals__cleanup(void);
extern void test_config_configlevel__adding_the_same_level_twice_returns_EEXISTS(void);
extern void test_config_configlevel__can_replace_a_config_file_at_an_existing_level(void);
extern void test_config_configlevel__can_read_from_a_single_level_focused_file_after_parent_config_has_been_freed(void);
extern void test_config_configlevel__fetching_a_level_from_an_empty_compound_config_returns_ENOTFOUND(void);
extern void test_config_configlevel__can_fetch_highest_level(void);
extern void test_config_configlevel__can_override_local_with_worktree(void);
extern void test_config_find__one(void);
extern void test_config_global__open_global(void);
extern void test_config_global__open_symlinked_global(void);
extern void test_config_global__lock_missing_global_config(void);
extern void test_config_global__open_xdg(void);
extern void test_config_global__open_programdata(void);
extern void test_config_global__initialize(void);
extern void test_config_global__cleanup(void);
extern void test_config_include__relative(void);
extern void test_config_include__absolute(void);
extern void test_config_include__homedir(void);
extern void test_config_include__ordering(void);
extern void test_config_include__depth(void);
extern void test_config_include__empty_path_sanely_handled(void);
extern void test_config_include__missing(void);
extern void test_config_include__missing_homedir(void);
extern void test_config_include__depth2(void);
extern void test_config_include__removing_include_removes_values(void);
extern void test_config_include__rewriting_include_refreshes_values(void);
extern void test_config_include__rewriting_include_twice_refreshes_values(void);
extern void test_config_include__included_variables_cannot_be_deleted(void);
extern void test_config_include__included_variables_cannot_be_modified(void);
extern void test_config_include__variables_in_included_override_including(void);
extern void test_config_include__variables_in_including_override_included(void);
extern void test_config_include__initialize(void);
extern void test_config_include__cleanup(void);
extern void test_config_memory__write_operations_fail(void);
extern void test_config_memory__simple(void);
extern void test_config_memory__malformed_fails_to_open(void);
extern void test_config_memory__multiple_vars(void);
extern void test_config_memory__multiple_sections(void);
extern void test_config_memory__multivar_gets_correct_string(void);
extern void test_config_memory__foreach_sees_multivar(void);
extern void test_config_memory__values(void);
extern void test_config_memory__valid_values(void);
extern void test_config_memory__initialize(void);
extern void test_config_memory__cleanup(void);
extern void test_config_multivar__foreach(void);
extern void test_config_multivar__get(void);
extern void test_config_multivar__add(void);
extern void test_config_multivar__add_new(void);
extern void test_config_multivar__replace(void);
extern void test_config_multivar__replace_multiple(void);
extern void test_config_multivar__delete(void);
extern void test_config_multivar__delete_multiple(void);
extern void test_config_multivar__delete_notfound(void);
extern void test_config_multivar__rename_section(void);
extern void test_config_multivar__initialize(void);
extern void test_config_multivar__cleanup(void);
extern void test_config_new__write_new_config(void);
extern void test_config_read__simple_read(void);
extern void test_config_read__case_sensitive(void);
extern void test_config_read__multiline_value(void);
extern void test_config_read__multiline_value_and_eof(void);
extern void test_config_read__multiline_eof(void);
extern void test_config_read__subsection_header(void);
extern void test_config_read__lone_variable(void);
extern void test_config_read__number_suffixes(void);
extern void test_config_read__blank_lines(void);
extern void test_config_read__invalid_ext_headers(void);
extern void test_config_read__empty_files(void);
extern void test_config_read__symbol_headers(void);
extern void test_config_read__multiline_multiple_quoted_comment_chars(void);
extern void test_config_read__multiline_multiple_quoted_quote_at_beginning_of_line(void);
extern void test_config_read__header_in_last_line(void);
extern void test_config_read__prefixes(void);
extern void test_config_read__escaping_quotes(void);
extern void test_config_read__invalid_escape_sequence(void);
extern void test_config_read__foreach(void);
extern void test_config_read__iterator(void);
extern void test_config_read__foreach_match(void);
extern void test_config_read__iterator_invalid_glob(void);
extern void test_config_read__iterator_glob(void);
extern void test_config_read__whitespace_not_required_around_assignment(void);
extern void test_config_read__read_git_config_entry(void);
extern void test_config_read__local_config_overrides_global_config_overrides_system_config(void);
extern void test_config_read__fallback_from_local_to_global_and_from_global_to_system(void);
extern void test_config_read__parent_dir_is_file(void);
extern void test_config_read__simple_read_from_specific_level(void);
extern void test_config_read__can_load_and_parse_an_empty_config_file(void);
extern void test_config_read__corrupt_header(void);
extern void test_config_read__corrupt_header2(void);
extern void test_config_read__corrupt_header3(void);
extern void test_config_read__invalid_key_chars(void);
extern void test_config_read__lone_variable_with_trailing_whitespace(void);
extern void test_config_read__override_variable(void);
extern void test_config_read__path(void);
extern void test_config_read__crlf_style_line_endings(void);
extern void test_config_read__trailing_crlf(void);
extern void test_config_read__bom(void);
extern void test_config_read__arbitrary_whitespace_before_subsection(void);
extern void test_config_read__no_whitespace_after_subsection(void);
extern void test_config_read__invalid_space_section(void);
extern void test_config_read__invalid_quoted_first_section(void);
extern void test_config_read__invalid_unquoted_subsection(void);
extern void test_config_read__invalid_quoted_third_section(void);
extern void test_config_read__unreadable_file_ignored(void);
extern void test_config_read__single_line(void);
extern void test_config_read__nosection(void);
extern void test_config_read__get_mapped(void);
extern void test_config_read__cleanup(void);
extern void test_config_readonly__writing_to_readonly_fails(void);
extern void test_config_readonly__writing_to_cfg_with_rw_precedence_succeeds(void);
extern void test_config_readonly__writing_to_cfg_with_ro_precedence_succeeds(void);
extern void test_config_readonly__initialize(void);
extern void test_config_readonly__cleanup(void);
extern void test_config_rename__can_rename(void);
extern void test_config_rename__prevent_overwrite(void);
extern void test_config_rename__require_a_valid_new_name(void);
extern void test_config_rename__initialize(void);
extern void test_config_rename__cleanup(void);
extern void test_config_snapshot__create_snapshot(void);
extern void test_config_snapshot__multivar(void);
extern void test_config_snapshot__includes(void);
extern void test_config_snapshot__snapshot(void);
extern void test_config_snapshot__snapshot_from_in_memory(void);
extern void test_config_snapshot__cleanup(void);
extern void test_config_stress__dont_break_on_invalid_input(void);
extern void test_config_stress__comments(void);
extern void test_config_stress__escape_subsection_names(void);
extern void test_config_stress__trailing_backslash(void);
extern void test_config_stress__complex(void);
extern void test_config_stress__quick_write(void);
extern void test_config_stress__foreach_refreshes(void);
extern void test_config_stress__foreach_refreshes_snapshot(void);
extern void test_config_stress__huge_section_with_many_values(void);
extern void test_config_stress__initialize(void);
extern void test_config_stress__cleanup(void);
extern void test_config_validkeyname__accessing_requires_a_valid_name(void);
extern void test_config_validkeyname__initialize(void);
extern void test_config_validkeyname__cleanup(void);
extern void test_config_write__replace_value(void);
extern void test_config_write__delete_value(void);
extern void test_config_write__delete_value_at_specific_level(void);
extern void test_config_write__delete_value_with_duplicate_header(void);
extern void test_config_write__add_value_with_duplicate_header(void);
extern void test_config_write__overwrite_value_with_duplicate_header(void);
extern void test_config_write__overwrite_multivar_within_duplicate_header(void);
extern void test_config_write__write_subsection(void);
extern void test_config_write__delete_inexistent(void);
extern void test_config_write__value_containing_quotes(void);
extern void test_config_write__escape_value(void);
extern void test_config_write__add_value_at_specific_level(void);
extern void test_config_write__add_value_at_file_with_no_clrf_at_the_end(void);
extern void test_config_write__add_section_at_file_with_no_clrf_at_the_end(void);
extern void test_config_write__add_value_which_needs_quotes(void);
extern void test_config_write__can_set_a_value_to_NULL(void);
extern void test_config_write__can_set_an_empty_value(void);
extern void test_config_write__updating_a_locked_config_file_returns_ELOCKED(void);
extern void test_config_write__outside_change(void);
extern void test_config_write__preserves_whitespace_and_comments(void);
extern void test_config_write__preserves_entry_with_name_only(void);
extern void test_config_write__to_empty_file(void);
extern void test_config_write__to_file_with_only_comment(void);
extern void test_config_write__locking(void);
extern void test_config_write__abort_lock(void);
extern void test_config_write__repeated(void);
extern void test_config_write__preserve_case(void);
extern void test_config_write__write_config_file_with_multi_line_value(void);
extern void test_config_write__initialize(void);
extern void test_config_write__cleanup(void);
extern void test_core_buf__sanitize(void);
extern void test_core_buf__tostr(void);
extern void test_core_buf__fromstr(void);
extern void test_core_env__0(void);
extern void test_core_env__1(void);
extern void test_core_env__2(void);
extern void test_core_env__substitution(void);
extern void test_core_env__initialize(void);
extern void test_core_env__cleanup(void);
extern void test_core_features__0(void);
extern void test_core_hashsig__similarity_metric(void);
extern void test_core_hashsig__similarity_metric_whitespace(void);
extern void test_core_oid__streq_sha1(void);
extern void test_core_oid__streq_sha256(void);
extern void test_core_oid__strcmp_sha1(void);
extern void test_core_oid__strcmp_sha256(void);
extern void test_core_oid__ncmp_sha1(void);
extern void test_core_oid__ncmp_sha256(void);
extern void test_core_oid__is_hexstr(void);
extern void test_core_oid__fmt_substr_sha1(void);
extern void test_core_oid__type_lookup(void);
extern void test_core_oid__initialize(void);
extern void test_core_oidarray__add_and_remove_oid_from_shallowarray(void);
extern void test_core_oidmap__basic(void);
extern void test_core_oidmap__hash_collision(void);
extern void test_core_oidmap__get_succeeds_with_existing_keys(void);
extern void test_core_oidmap__get_fails_with_nonexisting_key(void);
extern void test_core_oidmap__setting_oid_persists(void);
extern void test_core_oidmap__setting_existing_key_updates(void);
extern void test_core_oidmap__initialize(void);
extern void test_core_oidmap__cleanup(void);
extern void test_core_opts__readwrite(void);
extern void test_core_opts__invalid_option(void);
extern void test_core_opts__extensions_query(void);
extern void test_core_opts__extensions_add(void);
extern void test_core_opts__extensions_remove(void);
extern void test_core_opts__extensions_uniq(void);
extern void test_core_opts__cleanup(void);
extern void test_core_pool__oid(void);
extern void test_core_structinit__compare(void);
extern void test_core_useragent__get_default(void);
extern void test_core_useragent__set(void);
extern void test_core_useragent__initialize(void);
extern void test_core_useragent__cleanup(void);
extern void test_date_date__overflow(void);
extern void test_date_date__invalid_date(void);
extern void test_date_date__offset(void);
extern void test_date_rfc2822__format_rfc2822_no_offset(void);
extern void test_date_rfc2822__format_rfc2822_positive_offset(void);
extern void test_date_rfc2822__format_rfc2822_negative_offset(void);
extern void test_delta_apply__read_at_off(void);
extern void test_delta_apply__read_after_limit(void);
extern void test_describe_describe__can_describe_against_a_bare_repo(void);
extern void test_describe_describe__describe_a_repo_with_no_refs(void);
extern void test_describe_t6120__default(void);
extern void test_describe_t6120__tags(void);
extern void test_describe_t6120__all(void);
extern void test_describe_t6120__longformat(void);
extern void test_describe_t6120__firstparent(void);
extern void test_describe_t6120__workdir(void);
extern void test_describe_t6120__pattern(void);
extern void test_describe_t6120__initialize(void);
extern void test_describe_t6120__cleanup(void);
extern void test_diff_binary__add_normal(void);
extern void test_diff_binary__add(void);
extern void test_diff_binary__modify_normal(void);
extern void test_diff_binary__modify(void);
extern void test_diff_binary__delete_normal(void);
extern void test_diff_binary__delete(void);
extern void test_diff_binary__delta(void);
extern void test_diff_binary__delta_append(void);
extern void test_diff_binary__empty_for_no_diff(void);
extern void test_diff_binary__index_to_workdir(void);
extern void test_diff_binary__print_patch_from_diff(void);
extern void test_diff_binary__blob_to_blob(void);
extern void test_diff_binary__initialize(void);
extern void test_diff_binary__cleanup(void);
extern void test_diff_blob__patch_with_freed_blobs(void);
extern void test_diff_blob__can_compare_text_blobs(void);
extern void test_diff_blob__can_compare_text_blobs_with_patch(void);
extern void test_diff_blob__can_compare_against_null_blobs(void);
extern void test_diff_blob__can_compare_against_null_blobs_with_patch(void);
extern void test_diff_blob__can_compare_identical_blobs(void);
extern void test_diff_blob__can_compare_identical_blobs_with_patch(void);
extern void test_diff_blob__can_compare_two_binary_blobs(void);
extern void test_diff_blob__can_compare_a_binary_blob_and_a_text_blob(void);
extern void test_diff_blob__comparing_two_text_blobs_honors_interhunkcontext(void);
extern void test_diff_blob__checks_options_version_too_low(void);
extern void test_diff_blob__checks_options_version_too_high(void);
extern void test_diff_blob__can_correctly_detect_a_binary_blob_as_binary(void);
extern void test_diff_blob__can_correctly_detect_binary_blob_data_as_binary(void);
extern void test_diff_blob__can_correctly_detect_a_textual_blob_as_non_binary(void);
extern void test_diff_blob__can_correctly_detect_textual_blob_data_as_non_binary(void);
extern void test_diff_blob__can_compare_blob_to_buffer(void);
extern void test_diff_blob__can_compare_blob_to_buffer_with_patch(void);
extern void test_diff_blob__binary_data_comparisons(void);
extern void test_diff_blob__using_path_and_attributes(void);
extern void test_diff_blob__can_compare_buffer_to_buffer(void);
extern void test_diff_blob__initialize(void);
extern void test_diff_blob__cleanup(void);
extern void test_diff_diffiter__create(void);
extern void test_diff_diffiter__iterate_files_1(void);
extern void test_diff_diffiter__iterate_files_2(void);
extern void test_diff_diffiter__iterate_files_and_hunks(void);
extern void test_diff_diffiter__max_size_threshold(void);
extern void test_diff_diffiter__iterate_all(void);
extern void test_diff_diffiter__iterate_randomly_while_saving_state(void);
extern void test_diff_diffiter__iterate_and_generate_patch_text(void);
extern void test_diff_diffiter__checks_options_version(void);
extern void test_diff_diffiter__initialize(void);
extern void test_diff_diffiter__cleanup(void);
extern void test_diff_drivers__patterns(void);
extern void test_diff_drivers__long_lines(void);
extern void test_diff_drivers__builtins(void);
extern void test_diff_drivers__invalid_pattern(void);
extern void test_diff_drivers__initialize(void);
extern void test_diff_drivers__cleanup(void);
extern void test_diff_externalmodifications__file_becomes_smaller(void);
extern void test_diff_externalmodifications__file_becomes_empty(void);
extern void test_diff_externalmodifications__file_deleted(void);
extern void test_diff_externalmodifications__empty_file_becomes_non_empty(void);
extern void test_diff_externalmodifications__initialize(void);
extern void test_diff_externalmodifications__cleanup(void);
extern void test_diff_format_email__simple(void);
extern void test_diff_format_email__with_message(void);
extern void test_diff_format_email__multiple(void);
extern void test_diff_format_email__exclude_marker(void);
extern void test_diff_format_email__invalid_no(void);
extern void test_diff_format_email__mode_change(void);
extern void test_diff_format_email__rename_add_remove(void);
extern void test_diff_format_email__multiline_summary(void);
extern void test_diff_format_email__binary(void);
extern void test_diff_format_email__initialize(void);
extern void test_diff_format_email__cleanup(void);
extern void test_diff_index__0(void);
extern void test_diff_index__1(void);
extern void test_diff_index__checks_options_version(void);
extern void test_diff_index__reports_conflicts(void);
extern void test_diff_index__reports_conflicts_when_reversed(void);
extern void test_diff_index__not_in_head_conflicted(void);
extern void test_diff_index__to_index(void);
extern void test_diff_index__initialize(void);
extern void test_diff_index__cleanup(void);
extern void test_diff_notify__notify_single_pathspec(void);
extern void test_diff_notify__notify_multiple_pathspec(void);
extern void test_diff_notify__notify_catchall_with_empty_pathspecs(void);
extern void test_diff_notify__notify_catchall(void);
extern void test_diff_notify__notify_cb_can_abort_diff(void);
extern void test_diff_notify__notify_cb_can_be_used_as_filtering_function(void);
extern void test_diff_notify__progress_cb_can_abort_diff(void);
extern void test_diff_notify__initialize(void);
extern void test_diff_notify__cleanup(void);
extern void test_diff_parse__nonpatches_fail_with_notfound(void);
extern void test_diff_parse__exact_rename(void);
extern void test_diff_parse__empty_file(void);
extern void test_diff_parse__no_extended_headers(void);
extern void test_diff_parse__add_delete_no_index(void);
extern void test_diff_parse__invalid_patches_fails(void);
extern void test_diff_parse__can_parse_generated_diff(void);
extern void test_diff_parse__get_patch_from_diff(void);
extern void test_diff_parse__eof_nl_missing(void);
extern void test_diff_parse__foreach_works_with_parsed_patch(void);
extern void test_diff_parse__parsing_minimal_patch_succeeds(void);
extern void test_diff_parse__patch_roundtrip_succeeds(void);
extern void test_diff_parse__issue4672(void);
extern void test_diff_parse__lineinfo(void);
extern void test_diff_parse__new_file_with_space(void);
extern void test_diff_parse__new_file_with_space_and_regenerate_patch(void);
extern void test_diff_parse__delete_file_with_space_and_regenerate_patch(void);
extern void test_diff_parse__crlf(void);
extern void test_diff_parse__cleanup(void);
extern void test_diff_patch__can_properly_display_the_removal_of_a_file(void);
extern void test_diff_patch__can_cancel_diff_print(void);
extern void test_diff_patch__to_string(void);
extern void test_diff_patch__config_options(void);
extern void test_diff_patch__hunks_have_correct_line_numbers(void);
extern void test_diff_patch__line_counts_with_eofnl(void);
extern void test_diff_patch__can_strip_bad_utf8(void);
extern void test_diff_patch__initialize(void);
extern void test_diff_patch__cleanup(void);
extern void test_diff_patchid__simple_commit(void);
extern void test_diff_patchid__deleted_file(void);
extern void test_diff_patchid__created_file(void);
extern void test_diff_patchid__binary_file(void);
extern void test_diff_patchid__renamed_file(void);
extern void test_diff_patchid__modechange(void);
extern void test_diff_patchid__shuffle_hunks(void);
extern void test_diff_patchid__filename_with_spaces(void);
extern void test_diff_patchid__multiple_hunks(void);
extern void test_diff_patchid__multiple_files(void);
extern void test_diff_patchid__same_diff_with_differing_whitespace_has_same_id(void);
extern void test_diff_pathspec__0(void);
extern void test_diff_pathspec__initialize(void);
extern void test_diff_pathspec__cleanup(void);
extern void test_diff_racediffiter__basic(void);
extern void test_diff_racediffiter__racy(void);
extern void test_diff_racediffiter__initialize(void);
extern void test_diff_racediffiter__cleanup(void);
extern void test_diff_rename__match_oid(void);
extern void test_diff_rename__checks_options_version(void);
extern void test_diff_rename__not_exact_match(void);
extern void test_diff_rename__test_small_files(void);
extern void test_diff_rename__working_directory_changes(void);
extern void test_diff_rename__patch(void);
extern void test_diff_rename__file_exchange(void);
extern void test_diff_rename__file_exchange_three(void);
extern void test_diff_rename__file_partial_exchange(void);
extern void test_diff_rename__rename_and_copy_from_same_source(void);
extern void test_diff_rename__from_deleted_to_split(void);
extern void test_diff_rename__rejected_match_can_match_others(void);
extern void test_diff_rename__rejected_match_can_match_others_two(void);
extern void test_diff_rename__rejected_match_can_match_others_three(void);
extern void test_diff_rename__can_rename_from_rewrite(void);
extern void test_diff_rename__case_changes_are_split(void);
extern void test_diff_rename__unmodified_can_be_renamed(void);
extern void test_diff_rename__rewrite_on_single_file(void);
extern void test_diff_rename__can_find_copy_to_split(void);
extern void test_diff_rename__can_delete_unmodified_deltas(void);
extern void test_diff_rename__can_delete_unmodified_deltas_including_submodule(void);
extern void test_diff_rename__matches_config_behavior(void);
extern void test_diff_rename__can_override_thresholds_when_obeying_config(void);
extern void test_diff_rename__by_config_doesnt_mess_with_whitespace_settings(void);
extern void test_diff_rename__empty_files_renamed(void);
extern void test_diff_rename__blank_files_renamed_when_ignoring_whitespace(void);
extern void test_diff_rename__blank_files_not_renamed_when_not_ignoring_whitespace(void);
extern void test_diff_rename__identical(void);
extern void test_diff_rename__rewrite_and_delete(void);
extern void test_diff_rename__delete_and_rename(void);
extern void test_diff_rename__break_rewrite(void);
extern void test_diff_rename__initialize(void);
extern void test_diff_rename__cleanup(void);
extern void test_diff_stats__stat(void);
extern void test_diff_stats__multiple_hunks(void);
extern void test_diff_stats__numstat(void);
extern void test_diff_stats__shortstat(void);
extern void test_diff_stats__shortstat_noinsertions(void);
extern void test_diff_stats__shortstat_nodeletions(void);
extern void test_diff_stats__rename(void);
extern void test_diff_stats__rename_nochanges(void);
extern void test_diff_stats__rename_and_modifiy(void);
extern void test_diff_stats__rename_in_subdirectory(void);
extern void test_diff_stats__rename_no_find(void);
extern void test_diff_stats__rename_nochanges_no_find(void);
extern void test_diff_stats__rename_and_modify_no_find(void);
extern void test_diff_stats__binary(void);
extern void test_diff_stats__binary_numstat(void);
extern void test_diff_stats__mode_change(void);
extern void test_diff_stats__new_file(void);
extern void test_diff_stats__initialize(void);
extern void test_diff_stats__cleanup(void);
extern void test_diff_submodules__unmodified_submodule(void);
extern void test_diff_submodules__dirty_submodule(void);
extern void test_diff_submodules__dirty_submodule_2(void);
extern void test_diff_submodules__submod2_index_to_wd(void);
extern void test_diff_submodules__submod2_head_to_index(void);
extern void test_diff_submodules__invalid_cache(void);
extern void test_diff_submodules__diff_ignore_options(void);
extern void test_diff_submodules__skips_empty_includes_used(void);
extern void test_diff_submodules__can_be_identified_by_trailing_slash_in_pathspec(void);
extern void test_diff_submodules__initialize(void);
extern void test_diff_submodules__cleanup(void);
extern void test_diff_tree__0(void);
extern void test_diff_tree__options(void);
extern void test_diff_tree__bare(void);
extern void test_diff_tree__merge(void);
extern void test_diff_tree__larger_hunks(void);
extern void test_diff_tree__checks_options_version(void);
extern void test_diff_tree__symlink_blob_mode_changed_to_regular_file(void);
extern void test_diff_tree__symlink_blob_mode_changed_to_regular_file_as_typechange(void);
extern void test_diff_tree__regular_blob_mode_changed_to_executable_file(void);
extern void test_diff_tree__issue_1397(void);
extern void test_diff_tree__diff_configs(void);
extern void test_diff_tree__diff_tree_with_empty_dir_entry_succeeds(void);
extern void test_diff_tree__initialize(void);
extern void test_diff_tree__cleanup(void);
extern void test_diff_userdiff__compile_userdiff_regexps(void);
extern void test_diff_userdiff__cleanup(void);
extern void test_diff_workdir__to_index(void);
extern void test_diff_workdir__to_index_with_conflicts(void);
extern void test_diff_workdir__to_index_with_assume_unchanged(void);
extern void test_diff_workdir__to_tree(void);
extern void test_diff_workdir__to_index_with_pathspec(void);
extern void test_diff_workdir__to_index_with_pathlist_disabling_fnmatch(void);
extern void test_diff_workdir__filemode_changes(void);
extern void test_diff_workdir__filemode_changes_with_filemode_false(void);
extern void test_diff_workdir__head_index_and_workdir_all_differ(void);
extern void test_diff_workdir__eof_newline_changes(void);
extern void test_diff_workdir__larger_hunks(void);
extern void test_diff_workdir__submodules(void);
extern void test_diff_workdir__cannot_diff_against_a_bare_repository(void);
extern void test_diff_workdir__to_null_tree(void);
extern void test_diff_workdir__checks_options_version(void);
extern void test_diff_workdir__can_diff_empty_untracked_file(void);
extern void test_diff_workdir__can_diff_empty_file(void);
extern void test_diff_workdir__to_index_issue_1397(void);
extern void test_diff_workdir__to_tree_issue_1397(void);
extern void test_diff_workdir__untracked_directory_scenarios(void);
extern void test_diff_workdir__untracked_directory_comes_last(void);
extern void test_diff_workdir__untracked_with_bom(void);
extern void test_diff_workdir__patience_diff(void);
extern void test_diff_workdir__with_stale_index(void);
extern void test_diff_workdir__can_update_index(void);
extern void test_diff_workdir__binary_detection(void);
extern void test_diff_workdir__to_index_conflicted(void);
extern void test_diff_workdir__only_writes_index_when_necessary(void);
extern void test_diff_workdir__to_index_pathlist(void);
extern void test_diff_workdir__symlink_changed_on_non_symlink_platform(void);
extern void test_diff_workdir__order(void);
extern void test_diff_workdir__ignore_blank_lines(void);
extern void test_diff_workdir__to_index_reversed_content_loads(void);
extern void test_diff_workdir__completely_ignored_shows_empty_diff(void);
extern void test_diff_workdir__cleanup(void);
extern void test_email_create__commit(void);
extern void test_email_create__rename(void);
extern void test_email_create__rename_as_add_delete(void);
extern void test_email_create__binary(void);
extern void test_email_create__binary_not_included(void);
extern void test_email_create__custom_summary_and_body(void);
extern void test_email_create__commit_subjects(void);
extern void test_email_create__initialize(void);
extern void test_email_create__cleanup(void);
extern void test_fetch_local__defaults(void);
extern void test_fetch_local__reachable_commit(void);
extern void test_fetch_local__initialize(void);
extern void test_fetch_local__cleanup(void);
extern void test_fetchhead_nonetwork__write(void);
extern void test_fetchhead_nonetwork__read(void);
extern void test_fetchhead_nonetwork__read_old_style(void);
extern void test_fetchhead_nonetwork__type_missing(void);
extern void test_fetchhead_nonetwork__name_missing(void);
extern void test_fetchhead_nonetwork__nonexistent(void);
extern void test_fetchhead_nonetwork__invalid_unterminated_last_line(void);
extern void test_fetchhead_nonetwork__invalid_oid(void);
extern void test_fetchhead_nonetwork__invalid_for_merge(void);
extern void test_fetchhead_nonetwork__invalid_description(void);
extern void test_fetchhead_nonetwork__unborn_with_upstream(void);
extern void test_fetchhead_nonetwork__fetch_into_repo_with_symrefs(void);
extern void test_fetchhead_nonetwork__fetch_into_repo_with_invalid_head(void);
extern void test_fetchhead_nonetwork__quote_in_branch_name(void);
extern void test_fetchhead_nonetwork__create_when_refpecs_given(void);
extern void test_fetchhead_nonetwork__create_with_multiple_refspecs(void);
extern void test_fetchhead_nonetwork__credentials_are_stripped(void);
extern void test_fetchhead_nonetwork__initialize(void);
extern void test_filter_bare__all_crlf(void);
extern void test_filter_bare__from_lf(void);
extern void test_filter_bare__nested_attributes(void);
extern void test_filter_bare__sanitizes(void);
extern void test_filter_bare__from_specific_commit_one(void);
extern void test_filter_bare__from_specific_commit_with_no_attributes_file(void);
extern void test_filter_bare__initialize(void);
extern void test_filter_bare__cleanup(void);
extern void test_filter_blob__all_crlf(void);
extern void test_filter_blob__from_lf(void);
extern void test_filter_blob__sanitizes(void);
extern void test_filter_blob__ident(void);
extern void test_filter_blob__initialize(void);
extern void test_filter_blob__cleanup(void);
extern void test_filter_crlf__to_worktree(void);
extern void test_filter_crlf__to_odb(void);
extern void test_filter_crlf__with_safecrlf(void);
extern void test_filter_crlf__with_safecrlf_and_unsafe_allowed(void);
extern void test_filter_crlf__no_safecrlf(void);
extern void test_filter_crlf__safecrlf_warn(void);
extern void test_filter_crlf__initialize(void);
extern void test_filter_crlf__cleanup(void);
extern void test_filter_custom__to_odb(void);
extern void test_filter_custom__to_workdir(void);
extern void test_filter_custom__can_register_a_custom_filter_in_the_repository(void);
extern void test_filter_custom__order_dependency(void);
extern void test_filter_custom__filter_registry_failure_cases(void);
extern void test_filter_custom__erroneous_filter_fails(void);
extern void test_filter_custom__initialize(void);
extern void test_filter_custom__cleanup(void);
extern void test_filter_file__apply(void);
extern void test_filter_file__apply_stream(void);
extern void test_filter_file__initialize(void);
extern void test_filter_file__cleanup(void);
extern void test_filter_ident__to_worktree(void);
extern void test_filter_ident__to_odb(void);
extern void test_filter_ident__initialize(void);
extern void test_filter_ident__cleanup(void);
extern void test_filter_query__filters(void);
extern void test_filter_query__autocrlf_true_implies_crlf(void);
extern void test_filter_query__unknown(void);
extern void test_filter_query__custom(void);
extern void test_filter_query__initialize(void);
extern void test_filter_query__cleanup(void);
extern void test_filter_stream__smallfile(void);
extern void test_filter_stream__bigfile(void);
extern void test_filter_stream__initialize(void);
extern void test_filter_stream__cleanup(void);
extern void test_filter_systemattrs__reads_system_attributes(void);
extern void test_filter_systemattrs__disables_system_attributes(void);
extern void test_filter_systemattrs__initialize(void);
extern void test_filter_systemattrs__cleanup(void);
extern void test_filter_wildcard__reverse(void);
extern void test_filter_wildcard__flip(void);
extern void test_filter_wildcard__none(void);
extern void test_filter_wildcard__initialize(void);
extern void test_filter_wildcard__cleanup(void);
extern void test_grafts_basic__graft_add(void);
extern void test_grafts_basic__grafted_revwalk(void);
extern void test_grafts_basic__grafted_objects(void);
extern void test_grafts_basic__grafted_merge_revwalk(void);
extern void test_grafts_basic__initialize(void);
extern void test_grafts_basic__cleanup(void);
extern void test_grafts_parse__single_oid(void);
extern void test_grafts_parse__single_oid_with_newline(void);
extern void test_grafts_parse__multiple_oids(void);
extern void test_grafts_parse__same_oid(void);
extern void test_grafts_parse__oid_with_parent(void);
extern void test_grafts_parse__oid_with_parent_and_newline(void);
extern void test_grafts_parse__oid_with_multiple_parents(void);
extern void test_grafts_parse__multiple_oids_with_multiple_parents(void);
extern void test_grafts_parse__multiple_spaces_fails(void);
extern void test_grafts_parse__trailing_space_fails(void);
extern void test_grafts_parse__invalid_character_inbetween_fails(void);
extern void test_grafts_parse__truncated_oid_fails(void);
extern void test_grafts_parse__truncated_parent_fails(void);
extern void test_grafts_parse__invalid_oid_fails(void);
extern void test_grafts_parse__invalid_parent_fails(void);
extern void test_grafts_parse__initialize(void);
extern void test_grafts_parse__cleanup(void);
extern void test_grafts_shallow__no_shallow_file(void);
extern void test_grafts_shallow__empty_shallow_file(void);
extern void test_grafts_shallow__shallow_repo(void);
extern void test_grafts_shallow__clears_errors(void);
extern void test_grafts_shallow__shallow_oids(void);
extern void test_grafts_shallow__cache_clearing(void);
extern void test_grafts_shallow__errors_on_borked(void);
extern void test_grafts_shallow__revwalk_behavior(void);
extern void test_grafts_shallow__grafted_object(void);
extern void test_grafts_shallow__initialize(void);
extern void test_grafts_shallow__cleanup(void);
extern void test_graph_ahead_behind__returns_correct_result(void);
extern void test_graph_ahead_behind__initialize(void);
extern void test_graph_ahead_behind__cleanup(void);
extern void test_graph_commitgraph__parse(void);
extern void test_graph_commitgraph__parse_octopus_merge(void);
extern void test_graph_commitgraph__writer(void);
extern void test_graph_commitgraph__validate(void);
extern void test_graph_commitgraph__validate_corrupt(void);
extern void test_graph_descendant_of__returns_correct_result(void);
extern void test_graph_descendant_of__nopath(void);
extern void test_graph_descendant_of__initialize(void);
extern void test_graph_descendant_of__cleanup(void);
extern void test_graph_reachable_from_any__returns_correct_result(void);
extern void test_graph_reachable_from_any__exhaustive(void);
extern void test_graph_reachable_from_any__initialize(void);
extern void test_graph_reachable_from_any__cleanup(void);
extern void test_ignore_path__honor_temporary_rules(void);
extern void test_ignore_path__allow_root(void);
extern void test_ignore_path__ignore_space(void);
extern void test_ignore_path__intermittent_space(void);
extern void test_ignore_path__trailing_space(void);
extern void test_ignore_path__escaped_trailing_spaces(void);
extern void test_ignore_path__ignore_dir(void);
extern void test_ignore_path__ignore_dir_with_trailing_space(void);
extern void test_ignore_path__ignore_root(void);
extern void test_ignore_path__full_paths(void);
extern void test_ignore_path__more_starstar_cases(void);
extern void test_ignore_path__leading_stars(void);
extern void test_ignore_path__globs_and_path_delimiters(void);
extern void test_ignore_path__globs_without_star(void);
extern void test_ignore_path__skip_gitignore_directory(void);
extern void test_ignore_path__subdirectory_gitignore(void);
extern void test_ignore_path__expand_tilde_to_homedir(void);
extern void test_ignore_path__gitignore_in_subdir(void);
extern void test_ignore_path__dont_ignore_files_for_folder(void);
extern void test_ignore_path__symlink_to_outside(void);
extern void test_ignore_path__test(void);
extern void test_ignore_path__unignore_dir_succeeds(void);
extern void test_ignore_path__case_insensitive_unignores_previous_rule(void);
extern void test_ignore_path__case_sensitive_unignore_does_nothing(void);
extern void test_ignore_path__ignored_subdirfiles_with_subdir_rule(void);
extern void test_ignore_path__ignored_subdirfiles_with_negations(void);
extern void test_ignore_path__negative_directory_rules_only_match_directories(void);
extern void test_ignore_path__escaped_character(void);
extern void test_ignore_path__escaped_newline(void);
extern void test_ignore_path__escaped_glob(void);
extern void test_ignore_path__escaped_comments(void);
extern void test_ignore_path__escaped_slash(void);
extern void test_ignore_path__escaped_space(void);
extern void test_ignore_path__invalid_pattern(void);
extern void test_ignore_path__negative_prefix_rule(void);
extern void test_ignore_path__negative_more_specific(void);
extern void test_ignore_path__initialize(void);
extern void test_ignore_path__cleanup(void);
extern void test_ignore_status__0(void);
extern void test_ignore_status__1(void);
extern void test_ignore_status__empty_repo_with_gitignore_rewrite(void);
extern void test_ignore_status__ignore_pattern_contains_space(void);
extern void test_ignore_status__ignore_pattern_ignorecase(void);
extern void test_ignore_status__subdirectories(void);
extern void test_ignore_status__subdirectories_recursion(void);
extern void test_ignore_status__subdirectories_not_at_root(void);
extern void test_ignore_status__leading_slash_ignores(void);
extern void test_ignore_status__multiple_leading_slash(void);
extern void test_ignore_status__contained_dir_with_matching_name(void);
extern void test_ignore_status__trailing_slash_star(void);
extern void test_ignore_status__adding_internal_ignores(void);
extern void test_ignore_status__add_internal_as_first_thing(void);
extern void test_ignore_status__internal_ignores_inside_deep_paths(void);
extern void test_ignore_status__automatically_ignore_bad_files(void);
extern void test_ignore_status__filenames_with_special_prefixes_do_not_interfere_with_status_retrieval(void);
extern void test_ignore_status__issue_1766_negated_ignores(void);
extern void test_ignore_status__more_breakage(void);
extern void test_ignore_status__negative_ignores_inside_ignores(void);
extern void test_ignore_status__negative_ignores_in_slash_star(void);
extern void test_ignore_status__negative_ignores_without_trailing_slash_inside_ignores(void);
extern void test_ignore_status__negative_directory_ignores(void);
extern void test_ignore_status__unignore_entry_in_ignored_dir(void);
extern void test_ignore_status__do_not_unignore_basename_prefix(void);
extern void test_ignore_status__filename_with_cr(void);
extern void test_ignore_status__subdir_doesnt_match_above(void);
extern void test_ignore_status__negate_exact_previous(void);
extern void test_ignore_status__negate_starstar(void);
extern void test_ignore_status__ignore_all_toplevel_dirs_include_files(void);
extern void test_ignore_status__subdir_ignore_all_toplevel_dirs_include_files(void);
extern void test_ignore_status__subdir_ignore_everything_except_certain_files(void);
extern void test_ignore_status__deeper(void);
extern void test_ignore_status__unignored_dir_with_ignored_contents(void);
extern void test_ignore_status__unignored_subdirs(void);
extern void test_ignore_status__skips_bom(void);
extern void test_ignore_status__leading_spaces_are_significant(void);
extern void test_ignore_status__override_nested_wildcard_unignore(void);
extern void test_ignore_status__initialize(void);
extern void test_ignore_status__cleanup(void);
extern void test_index_add__invalid_entries_succeeds_by_default(void);
extern void test_index_add__two_slash_prefixed(void);
extern void test_index_add__initialize(void);
extern void test_index_add__cleanup(void);
extern void test_index_addall__repo_lifecycle(void);
extern void test_index_addall__files_in_folders(void);
extern void test_index_addall__hidden_files(void);
extern void test_index_addall__callback_filtering(void);
extern void test_index_addall__handles_ignored_files_in_directory(void);
extern void test_index_addall__force_adds_ignored_directories(void);
extern void test_index_addall__adds_conflicts(void);
extern void test_index_addall__removes_deleted_conflicted_files(void);
extern void test_index_addall__initialize(void);
extern void test_index_addall__cleanup(void);
extern void test_index_bypath__add_directory(void);
extern void test_index_bypath__add_submodule(void);
extern void test_index_bypath__add_submodule_unregistered(void);
extern void test_index_bypath__add_hidden(void);
extern void test_index_bypath__add_keeps_existing_case(void);
extern void test_index_bypath__add_honors_existing_case(void);
extern void test_index_bypath__add_honors_existing_case_2(void);
extern void test_index_bypath__add_honors_existing_case_3(void);
extern void test_index_bypath__add_honors_existing_case_4(void);
extern void test_index_bypath__add_honors_mode(void);
extern void test_index_bypath__add_honors_conflict_mode(void);
extern void test_index_bypath__add_honors_conflict_case(void);
extern void test_index_bypath__add_honors_symlink(void);
extern void test_index_bypath__initialize(void);
extern void test_index_bypath__cleanup(void);
extern void test_index_cache__write_extension_at_root(void);
extern void test_index_cache__write_extension_invalidated_root(void);
extern void test_index_cache__read_tree_no_children(void);
extern void test_index_cache__two_levels(void);
extern void test_index_cache__read_tree_children(void);
extern void test_index_cache__initialize(void);
extern void test_index_cache__cleanup(void);
extern void test_index_collision__add_blob_with_conflicting_file(void);
extern void test_index_collision__add_blob_with_conflicting_dir(void);
extern void test_index_collision__add_with_highstage_1(void);
extern void test_index_collision__add_with_highstage_2(void);
extern void test_index_collision__initialize(void);
extern void test_index_collision__cleanup(void);
extern void test_index_conflicts__add(void);
extern void test_index_conflicts__add_fixes_incorrect_stage(void);
extern void test_index_conflicts__add_detects_invalid_filemode(void);
extern void test_index_conflicts__add_removes_stage_zero(void);
extern void test_index_conflicts__get(void);
extern void test_index_conflicts__iterate(void);
extern void test_index_conflicts__remove(void);
extern void test_index_conflicts__moved_to_reuc_on_add(void);
extern void test_index_conflicts__moved_to_reuc_on_remove(void);
extern void test_index_conflicts__remove_all_conflicts(void);
extern void test_index_conflicts__partial(void);
extern void test_index_conflicts__case_matters(void);
extern void test_index_conflicts__initialize(void);
extern void test_index_conflicts__cleanup(void);
extern void test_index_crlf__matches_core_git(void);
extern void test_index_crlf__autocrlf_false_no_attrs(void);
extern void test_index_crlf__autocrlf_true_no_attrs(void);
extern void test_index_crlf__autocrlf_input_no_attrs(void);
extern void test_index_crlf__autocrlf_false_text_auto_attr(void);
extern void test_index_crlf__autocrlf_true_text_auto_attr(void);
extern void test_index_crlf__autocrlf_input_text_auto_attr(void);
extern void test_index_crlf__safecrlf_true_autocrlf_input_text_auto_attr(void);
extern void test_index_crlf__safecrlf_true_autocrlf_input_text__no_attr(void);
extern void test_index_crlf__safecrlf_true_no_attrs(void);
extern void test_index_crlf__initialize(void);
extern void test_index_crlf__cleanup(void);
extern void test_index_filemodes__read(void);
extern void test_index_filemodes__untrusted(void);
extern void test_index_filemodes__trusted(void);
extern void test_index_filemodes__explicit(void);
extern void test_index_filemodes__invalid(void);
extern void test_index_filemodes__frombuffer_requires_files(void);
extern void test_index_filemodes__initialize(void);
extern void test_index_filemodes__cleanup(void);
extern void test_index_inmemory__can_create_an_inmemory_index(void);
extern void test_index_inmemory__cannot_add_bypath_to_an_inmemory_index(void);
extern void test_index_names__add(void);
extern void test_index_names__roundtrip(void);
extern void test_index_names__cleaned_on_reset_hard(void);
extern void test_index_names__cleaned_on_reset_mixed(void);
extern void test_index_names__cleaned_on_checkout_tree(void);
extern void test_index_names__cleaned_on_checkout_head(void);
extern void test_index_names__retained_on_checkout_index(void);
extern void test_index_names__initialize(void);
extern void test_index_names__cleanup(void);
extern void test_index_nsec__has_nanos(void);
extern void test_index_nsec__staging_maintains_other_nanos(void);
extern void test_index_nsec__status_doesnt_clear_nsecs(void);
extern void test_index_nsec__initialize(void);
extern void test_index_nsec__cleanup(void);
extern void test_index_racy__diff(void);
extern void test_index_racy__write_index_just_after_file(void);
extern void test_index_racy__smudges_index_entry_on_save(void);
extern void test_index_racy__detects_diff_of_change_in_identical_timestamp(void);
extern void test_index_racy__adding_to_index_is_uptodate(void);
extern void test_index_racy__reading_clears_uptodate_bit(void);
extern void test_index_racy__read_tree_clears_uptodate_bit(void);
extern void test_index_racy__read_index_smudges(void);
extern void test_index_racy__read_index_clears_uptodate_bit(void);
extern void test_index_racy__initialize(void);
extern void test_index_racy__cleanup(void);
extern void test_index_read_index__maintains_stat_cache(void);
extern void test_index_read_index__produces_treesame_indexes(void);
extern void test_index_read_index__read_and_writes(void);
extern void test_index_read_index__handles_conflicts(void);
extern void test_index_read_index__initialize(void);
extern void test_index_read_index__cleanup(void);
extern void test_index_read_tree__read_write_involution(void);
extern void test_index_rename__single_file(void);
extern void test_index_rename__casechanging(void);
extern void test_index_reuc__add(void);
extern void test_index_reuc__add_no_ancestor(void);
extern void test_index_reuc__read_bypath(void);
extern void test_index_reuc__ignore_case(void);
extern void test_index_reuc__read_byindex(void);
extern void test_index_reuc__updates_existing(void);
extern void test_index_reuc__remove(void);
extern void test_index_reuc__write(void);
extern void test_index_reuc__cleaned_on_reset_hard(void);
extern void test_index_reuc__cleaned_on_reset_mixed(void);
extern void test_index_reuc__retained_on_reset_soft(void);
extern void test_index_reuc__cleaned_on_checkout_tree(void);
extern void test_index_reuc__cleaned_on_checkout_head(void);
extern void test_index_reuc__retained_on_checkout_index(void);
extern void test_index_reuc__initialize(void);
extern void test_index_reuc__cleanup(void);
extern void test_index_splitindex__fail_on_open(void);
extern void test_index_splitindex__initialize(void);
extern void test_index_splitindex__cleanup(void);
extern void test_index_stage__add_always_adds_stage_0(void);
extern void test_index_stage__find_gets_first_stage(void);
extern void test_index_stage__initialize(void);
extern void test_index_stage__cleanup(void);
extern void test_index_tests__empty_index(void);
extern void test_index_tests__default_test_index(void);
extern void test_index_tests__gitgit_index(void);
extern void test_index_tests__find_in_existing(void);
extern void test_index_tests__find_in_empty(void);
extern void test_index_tests__find_prefix(void);
extern void test_index_tests__write(void);
extern void test_index_tests__sort0(void);
extern void test_index_tests__sort1(void);
extern void test_index_tests__add(void);
extern void test_index_tests__add_frombuffer(void);
extern void test_index_tests__dirty_and_clean(void);
extern void test_index_tests__dirty_fails_optionally(void);
extern void test_index_tests__add_frombuffer_reset_entry(void);
extern void test_index_tests__add_issue_1397(void);
extern void test_index_tests__add_bypath_to_a_bare_repository_returns_EBAREPO(void);
extern void test_index_tests__cannot_add_invalid_filename(void);
extern void test_index_tests__cannot_add_protected_invalid_filename(void);
extern void test_index_tests__write_tree_invalid_unowned_index(void);
extern void test_index_tests__write_invalid_filename(void);
extern void test_index_tests__honors_protect_filesystems(void);
extern void test_index_tests__protectntfs_on_by_default(void);
extern void test_index_tests__can_disable_protectntfs(void);
extern void test_index_tests__remove_entry(void);
extern void test_index_tests__remove_directory(void);
extern void test_index_tests__preserves_case(void);
extern void test_index_tests__elocked(void);
extern void test_index_tests__reload_from_disk(void);
extern void test_index_tests__corrupted_extension(void);
extern void test_index_tests__reload_while_ignoring_case(void);
extern void test_index_tests__change_icase_on_instance(void);
extern void test_index_tests__can_lock_index(void);
extern void test_index_tests__can_iterate(void);
extern void test_index_tests__can_modify_while_iterating(void);
extern void test_index_tests__initialize(void);
extern void test_index_tests__cleanup(void);
extern void test_index_tests256__empty_index(void);
extern void test_index_tests256__default_test_index(void);
extern void test_index_tests256__find_in_existing(void);
extern void test_index_tests256__find_in_empty(void);
extern void test_index_tests256__find_prefix(void);
extern void test_index_tests256__write(void);
extern void test_index_tests256__sort1(void);
extern void test_index_tests256__add(void);
extern void test_index_tests256__add_frombuffer(void);
extern void test_index_tests256__dirty_and_clean(void);
extern void test_index_tests256__dirty_fails_optionally(void);
extern void test_index_tests256__add_frombuffer_reset_entry(void);
extern void test_index_tests256__add_bypath_to_a_bare_repository_returns_EBAREPO(void);
extern void test_index_tests256__cannot_add_invalid_filename(void);
extern void test_index_tests256__cannot_add_protected_invalid_filename(void);
extern void test_index_tests256__write_tree_invalid_unowned_index(void);
extern void test_index_tests256__write_invalid_filename(void);
extern void test_index_tests256__honors_protect_filesystems(void);
extern void test_index_tests256__protectntfs_on_by_default(void);
extern void test_index_tests256__can_disable_protectntfs(void);
extern void test_index_tests256__remove_entry(void);
extern void test_index_tests256__remove_directory(void);
extern void test_index_tests256__preserves_case(void);
extern void test_index_tests256__elocked(void);
extern void test_index_tests256__reload_from_disk(void);
extern void test_index_tests256__reload_while_ignoring_case(void);
extern void test_index_tests256__change_icase_on_instance(void);
extern void test_index_tests256__can_lock_index(void);
extern void test_index_tests256__can_iterate(void);
extern void test_index_tests256__can_modify_while_iterating(void);
extern void test_index_tests256__initialize(void);
extern void test_index_tests256__cleanup(void);
extern void test_index_version__can_read_v4(void);
extern void test_index_version__can_write_v4(void);
extern void test_index_version__v4_uses_path_compression(void);
extern void test_index_version__cleanup(void);
extern void test_iterator_index__0(void);
extern void test_iterator_index__1(void);
extern void test_iterator_index__range(void);
extern void test_iterator_index__range_empty_0(void);
extern void test_iterator_index__range_empty_1(void);
extern void test_iterator_index__range_empty_2(void);
extern void test_iterator_index__range_icase(void);
extern void test_iterator_index__case_folding(void);
extern void test_iterator_index__icase_0(void);
extern void test_iterator_index__icase_1(void);
extern void test_iterator_index__pathlist(void);
extern void test_iterator_index__pathlist_with_dirs(void);
extern void test_iterator_index__pathlist_with_dirs_include_trees(void);
extern void test_iterator_index__pathlist_1(void);
extern void test_iterator_index__pathlist_2(void);
extern void test_iterator_index__pathlist_four(void);
extern void test_iterator_index__pathlist_icase(void);
extern void test_iterator_index__pathlist_with_directory(void);
extern void test_iterator_index__pathlist_for_deeply_nested_item(void);
extern void test_iterator_index__advance_over(void);
extern void test_iterator_index__advance_into(void);
extern void test_iterator_index__advance_into_and_over(void);
extern void test_iterator_index__include_conflicts(void);
extern void test_iterator_index__initialize(void);
extern void test_iterator_index__cleanup(void);
extern void test_iterator_tree__0(void);
extern void test_iterator_tree__1(void);
extern void test_iterator_tree__2(void);
extern void test_iterator_tree__3(void);
extern void test_iterator_tree__4(void);
extern void test_iterator_tree__4_ranged(void);
extern void test_iterator_tree__ranged_0(void);
extern void test_iterator_tree__ranged_1(void);
extern void test_iterator_tree__range_empty_0(void);
extern void test_iterator_tree__range_empty_1(void);
extern void test_iterator_tree__range_empty_2(void);
extern void test_iterator_tree__special_functions(void);
extern void test_iterator_tree__range_icase(void);
extern void test_iterator_tree__icase_0(void);
extern void test_iterator_tree__icase_1(void);
extern void test_iterator_tree__icase_2(void);
extern void test_iterator_tree__case_conflicts_0(void);
extern void test_iterator_tree__case_conflicts_1(void);
extern void test_iterator_tree__case_conflicts_2(void);
extern void test_iterator_tree__pathlist(void);
extern void test_iterator_tree__pathlist_icase(void);
extern void test_iterator_tree__pathlist_with_directory(void);
extern void test_iterator_tree__pathlist_with_directory_include_tree_nodes(void);
extern void test_iterator_tree__pathlist_no_match(void);
extern void test_iterator_tree__initialize(void);
extern void test_iterator_tree__cleanup(void);
extern void test_iterator_workdir__0(void);
extern void test_iterator_workdir__1(void);
extern void test_iterator_workdir__1_ranged_0(void);
extern void test_iterator_workdir__1_ranged_1(void);
extern void test_iterator_workdir__1_ranged_3(void);
extern void test_iterator_workdir__1_ranged_4(void);
extern void test_iterator_workdir__1_ranged_5(void);
extern void test_iterator_workdir__1_ranged_5_1_ranged_empty_0(void);
extern void test_iterator_workdir__1_ranged_empty_1(void);
extern void test_iterator_workdir__1_ranged_empty_2(void);
extern void test_iterator_workdir__builtin_ignores(void);
extern void test_iterator_workdir__handles_icase_range(void);
extern void test_iterator_workdir__icase(void);
extern void test_iterator_workdir__icase_starts_and_ends(void);
extern void test_iterator_workdir__depth(void);
extern void test_iterator_workdir__filesystem(void);
extern void test_iterator_workdir__filesystem2(void);
extern void test_iterator_workdir__filesystem_gunk(void);
extern void test_iterator_workdir__skips_unreadable_dirs(void);
extern void test_iterator_workdir__skips_fifos_and_special_files(void);
extern void test_iterator_workdir__pathlist(void);
extern void test_iterator_workdir__pathlist_with_dirs(void);
extern void test_iterator_workdir__pathlist_for_deeply_nested_item(void);
extern void test_iterator_workdir__bounded_submodules(void);
extern void test_iterator_workdir__advance_over(void);
extern void test_iterator_workdir__advance_over_with_pathlist(void);
extern void test_iterator_workdir__advance_into(void);
extern void test_iterator_workdir__pathlist_with_directory(void);
extern void test_iterator_workdir__pathlist_with_directory_include_trees(void);
extern void test_iterator_workdir__hash_when_requested(void);
extern void test_iterator_workdir__initialize(void);
extern void test_iterator_workdir__cleanup(void);
extern void test_mailmap_basic__entry(void);
extern void test_mailmap_basic__lookup_not_found(void);
extern void test_mailmap_basic__lookup(void);
extern void test_mailmap_basic__empty_email_query(void);
extern void test_mailmap_basic__name_matching(void);
extern void test_mailmap_basic__initialize(void);
extern void test_mailmap_basic__cleanup(void);
extern void test_mailmap_blame__hunks(void);
extern void test_mailmap_blame__hunks_no_mailmap(void);
extern void test_mailmap_blame__initialize(void);
extern void test_mailmap_blame__cleanup(void);
extern void test_mailmap_parsing__string(void);
extern void test_mailmap_parsing__windows_string(void);
extern void test_mailmap_parsing__fromrepo(void);
extern void test_mailmap_parsing__frombare(void);
extern void test_mailmap_parsing__file_config(void);
extern void test_mailmap_parsing__blob_config(void);
extern void test_mailmap_parsing__bare_blob_config(void);
extern void test_mailmap_parsing__initialize(void);
extern void test_mailmap_parsing__cleanup(void);
extern void test_merge_analysis__fastforward(void);
extern void test_merge_analysis__no_fastforward(void);
extern void test_merge_analysis__uptodate(void);
extern void test_merge_analysis__uptodate_merging_prev_commit(void);
extern void test_merge_analysis__unborn(void);
extern void test_merge_analysis__fastforward_with_config_noff(void);
extern void test_merge_analysis__no_fastforward_with_config_ffonly(void);
extern void test_merge_analysis__between_uptodate_refs(void);
extern void test_merge_analysis__between_noff_refs(void);
extern void test_merge_analysis__initialize_with_bare_repository(void);
extern void test_merge_analysis__initialize_with_nonbare_repository(void);
extern void test_merge_analysis__cleanup(void);
extern void test_merge_annotated_commit__lookup_annotated_tag(void);
extern void test_merge_annotated_commit__initialize(void);
extern void test_merge_annotated_commit__cleanup(void);
extern void test_merge_driver__custom(void);
extern void test_merge_driver__wildcard(void);
extern void test_merge_driver__shutdown_is_called(void);
extern void test_merge_driver__apply_can_defer(void);
extern void test_merge_driver__apply_can_conflict(void);
extern void test_merge_driver__default_can_be_specified(void);
extern void test_merge_driver__honors_builtin_mergedefault(void);
extern void test_merge_driver__honors_custom_mergedefault(void);
extern void test_merge_driver__mergedefault_deferring_falls_back_to_text(void);
extern void test_merge_driver__set_forces_text(void);
extern void test_merge_driver__unset_forces_binary(void);
extern void test_merge_driver__not_configured_driver_falls_back(void);
extern void test_merge_driver__initialize(void);
extern void test_merge_driver__cleanup(void);
extern void test_merge_files__automerge_from_bufs(void);
extern void test_merge_files__automerge_use_best_path_and_mode(void);
extern void test_merge_files__conflict_from_bufs(void);
extern void test_merge_files__automerge_from_index(void);
extern void test_merge_files__automerge_whitespace_eol(void);
extern void test_merge_files__automerge_whitespace_change(void);
extern void test_merge_files__doesnt_add_newline(void);
extern void test_merge_files__skips_large_files(void);
extern void test_merge_files__skips_binaries(void);
extern void test_merge_files__handles_binaries_when_favored(void);
extern void test_merge_files__crlf_conflict_markers_for_crlf_files(void);
extern void test_merge_files__conflicts_in_zdiff3(void);
extern void test_merge_files__initialize(void);
extern void test_merge_files__cleanup(void);
extern void test_merge_trees_automerge__automerge(void);
extern void test_merge_trees_automerge__favor_ours(void);
extern void test_merge_trees_automerge__favor_theirs(void);
extern void test_merge_trees_automerge__unrelated(void);
extern void test_merge_trees_automerge__initialize(void);
extern void test_merge_trees_automerge__cleanup(void);
extern void test_merge_trees_commits__automerge(void);
extern void test_merge_trees_commits__no_ancestor(void);
extern void test_merge_trees_commits__df_conflict(void);
extern void test_merge_trees_commits__fail_on_conflict(void);
extern void test_merge_trees_commits__initialize(void);
extern void test_merge_trees_commits__cleanup(void);
extern void test_merge_trees_modeconflict__df_conflict(void);
extern void test_merge_trees_modeconflict__initialize(void);
extern void test_merge_trees_modeconflict__cleanup(void);
extern void test_merge_trees_recursive__one_base_commit(void);
extern void test_merge_trees_recursive__one_base_commit_norecursive(void);
extern void test_merge_trees_recursive__two_base_commits(void);
extern void test_merge_trees_recursive__two_base_commits_norecursive(void);
extern void test_merge_trees_recursive__two_levels_of_multiple_bases(void);
extern void test_merge_trees_recursive__two_levels_of_multiple_bases_norecursive(void);
extern void test_merge_trees_recursive__three_levels_of_multiple_bases(void);
extern void test_merge_trees_recursive__three_levels_of_multiple_bases_norecursive(void);
extern void test_merge_trees_recursive__three_base_commits(void);
extern void test_merge_trees_recursive__three_base_commits_norecursive(void);
extern void test_merge_trees_recursive__conflict(void);
extern void test_merge_trees_recursive__oh_so_many_levels_of_recursion(void);
extern void test_merge_trees_recursive__conflicting_merge_base(void);
extern void test_merge_trees_recursive__conflicting_merge_base_with_diff3(void);
extern void test_merge_trees_recursive__conflicting_merge_base_since_resolved(void);
extern void test_merge_trees_recursive__recursionlimit(void);
extern void test_merge_trees_recursive__merge_base_for_virtual_commit(void);
extern void test_merge_trees_recursive__merge_base_for_virtual_commit_2(void);
extern void test_merge_trees_recursive__initialize(void);
extern void test_merge_trees_recursive__cleanup(void);
extern void test_merge_trees_renames__index(void);
extern void test_merge_trees_renames__no_rename_index(void);
extern void test_merge_trees_renames__submodules(void);
extern void test_merge_trees_renames__cache_recomputation(void);
extern void test_merge_trees_renames__emptyfile_renames(void);
extern void test_merge_trees_renames__initialize(void);
extern void test_merge_trees_renames__cleanup(void);
extern void test_merge_trees_treediff__simple(void);
extern void test_merge_trees_treediff__df_conflicts(void);
extern void test_merge_trees_treediff__strict_renames(void);
extern void test_merge_trees_treediff__rename_conflicts(void);
extern void test_merge_trees_treediff__best_renames(void);
extern void test_merge_trees_treediff__initialize(void);
extern void test_merge_trees_treediff__cleanup(void);
extern void test_merge_trees_trivial__2alt(void);
extern void test_merge_trees_trivial__3alt(void);
extern void test_merge_trees_trivial__4(void);
extern void test_merge_trees_trivial__5alt_1(void);
extern void test_merge_trees_trivial__5alt_2(void);
extern void test_merge_trees_trivial__6(void);
extern void test_merge_trees_trivial__8(void);
extern void test_merge_trees_trivial__7(void);
extern void test_merge_trees_trivial__10(void);
extern void test_merge_trees_trivial__9(void);
extern void test_merge_trees_trivial__13(void);
extern void test_merge_trees_trivial__14(void);
extern void test_merge_trees_trivial__11(void);
extern void test_merge_trees_trivial__initialize(void);
extern void test_merge_trees_trivial__cleanup(void);
extern void test_merge_trees_whitespace__conflict(void);
extern void test_merge_trees_whitespace__eol(void);
extern void test_merge_trees_whitespace__change(void);
extern void test_merge_trees_whitespace__initialize(void);
extern void test_merge_trees_whitespace__cleanup(void);
extern void test_merge_workdir_dirty__unaffected_dirty_files_allowed(void);
extern void test_merge_workdir_dirty__unstaged_deletes_maintained(void);
extern void test_merge_workdir_dirty__affected_dirty_files_disallowed(void);
extern void test_merge_workdir_dirty__staged_files_in_index_disallowed(void);
extern void test_merge_workdir_dirty__identical_staged_files_allowed(void);
extern void test_merge_workdir_dirty__honors_cache(void);
extern void test_merge_workdir_dirty__initialize(void);
extern void test_merge_workdir_dirty__cleanup(void);
extern void test_merge_workdir_recursive__writes_conflict_with_virtual_base(void);
extern void test_merge_workdir_recursive__conflicting_merge_base_with_diff3(void);
extern void test_merge_workdir_recursive__initialize(void);
extern void test_merge_workdir_recursive__cleanup(void);
extern void test_merge_workdir_renames__renames(void);
extern void test_merge_workdir_renames__ours(void);
extern void test_merge_workdir_renames__similar(void);
extern void test_merge_workdir_renames__initialize(void);
extern void test_merge_workdir_renames__cleanup(void);
extern void test_merge_workdir_setup__one_branch(void);
extern void test_merge_workdir_setup__one_oid(void);
extern void test_merge_workdir_setup__two_branches(void);
extern void test_merge_workdir_setup__three_branches(void);
extern void test_merge_workdir_setup__three_oids(void);
extern void test_merge_workdir_setup__branches_and_oids_1(void);
extern void test_merge_workdir_setup__branches_and_oids_2(void);
extern void test_merge_workdir_setup__branches_and_oids_3(void);
extern void test_merge_workdir_setup__branches_and_oids_4(void);
extern void test_merge_workdir_setup__three_same_branches(void);
extern void test_merge_workdir_setup__three_same_oids(void);
extern void test_merge_workdir_setup__remote_tracking_one_branch(void);
extern void test_merge_workdir_setup__remote_tracking_two_branches(void);
extern void test_merge_workdir_setup__remote_tracking_three_branches(void);
extern void test_merge_workdir_setup__normal_branch_and_remote_tracking_branch(void);
extern void test_merge_workdir_setup__remote_tracking_branch_and_normal_branch(void);
extern void test_merge_workdir_setup__two_remote_tracking_branch_and_two_normal_branches(void);
extern void test_merge_workdir_setup__pull_one(void);
extern void test_merge_workdir_setup__pull_two(void);
extern void test_merge_workdir_setup__pull_three(void);
extern void test_merge_workdir_setup__three_remotes(void);
extern void test_merge_workdir_setup__two_remotes(void);
extern void test_merge_workdir_setup__id_from_head(void);
extern void test_merge_workdir_setup__head_notfound(void);
extern void test_merge_workdir_setup__head_invalid_oid(void);
extern void test_merge_workdir_setup__head_foreach_nonewline(void);
extern void test_merge_workdir_setup__head_foreach_one(void);
extern void test_merge_workdir_setup__head_foreach_octopus(void);
extern void test_merge_workdir_setup__retained_after_success(void);
extern void test_merge_workdir_setup__removed_after_failure(void);
extern void test_merge_workdir_setup__unlocked_after_success(void);
extern void test_merge_workdir_setup__unlocked_after_conflict(void);
extern void test_merge_workdir_setup__initialize(void);
extern void test_merge_workdir_setup__cleanup(void);
extern void test_merge_workdir_simple__automerge(void);
extern void test_merge_workdir_simple__index_reload(void);
extern void test_merge_workdir_simple__automerge_crlf(void);
extern void test_merge_workdir_simple__mergefile(void);
extern void test_merge_workdir_simple__diff3(void);
extern void test_merge_workdir_simple__zdiff3(void);
extern void test_merge_workdir_simple__union(void);
extern void test_merge_workdir_simple__gitattributes_union(void);
extern void test_merge_workdir_simple__diff3_from_config(void);
extern void test_merge_workdir_simple__zdiff3_from_config(void);
extern void test_merge_workdir_simple__merge_overrides_config(void);
extern void test_merge_workdir_simple__checkout_ours(void);
extern void test_merge_workdir_simple__favor_ours(void);
extern void test_merge_workdir_simple__favor_theirs(void);
extern void test_merge_workdir_simple__directory_file(void);
extern void test_merge_workdir_simple__unrelated(void);
extern void test_merge_workdir_simple__unrelated_with_conflicts(void);
extern void test_merge_workdir_simple__binary(void);
extern void test_merge_workdir_simple__initialize(void);
extern void test_merge_workdir_simple__cleanup(void);
extern void test_merge_workdir_submodules__automerge(void);
extern void test_merge_workdir_submodules__take_changed(void);
extern void test_merge_workdir_submodules__update_delete_conflict(void);
extern void test_merge_workdir_submodules__initialize(void);
extern void test_merge_workdir_submodules__cleanup(void);
extern void test_merge_workdir_trivial__2alt(void);
extern void test_merge_workdir_trivial__3alt(void);
extern void test_merge_workdir_trivial__4(void);
extern void test_merge_workdir_trivial__5alt_1(void);
extern void test_merge_workdir_trivial__5alt_2(void);
extern void test_merge_workdir_trivial__6(void);
extern void test_merge_workdir_trivial__8(void);
extern void test_merge_workdir_trivial__7(void);
extern void test_merge_workdir_trivial__10(void);
extern void test_merge_workdir_trivial__9(void);
extern void test_merge_workdir_trivial__13(void);
extern void test_merge_workdir_trivial__14(void);
extern void test_merge_workdir_trivial__11(void);
extern void test_merge_workdir_trivial__initialize(void);
extern void test_merge_workdir_trivial__cleanup(void);
extern void test_message_trailer__simple(void);
extern void test_message_trailer__no_whitespace(void);
extern void test_message_trailer__extra_whitespace(void);
extern void test_message_trailer__no_newline(void);
extern void test_message_trailer__not_last_paragraph(void);
extern void test_message_trailer__conflicts(void);
extern void test_message_trailer__patch(void);
extern void test_message_trailer__continuation(void);
extern void test_message_trailer__invalid(void);
extern void test_message_trailer__ignores_dashes(void);
extern void test_network_cred__stock_userpass_validates_args(void);
extern void test_network_cred__stock_userpass_validates_that_method_is_allowed(void);
extern void test_network_cred__stock_userpass_properly_handles_username_in_url(void);
extern void test_network_fetchlocal__complete(void);
extern void test_network_fetchlocal__prune(void);
extern void test_network_fetchlocal__prune_overlapping(void);
extern void test_network_fetchlocal__fetchprune(void);
extern void test_network_fetchlocal__prune_tag(void);
extern void test_network_fetchlocal__partial(void);
extern void test_network_fetchlocal__clone_into_mirror(void);
extern void test_network_fetchlocal__all_refs(void);
extern void test_network_fetchlocal__multi_remotes(void);
extern void test_network_fetchlocal__call_progress(void);
extern void test_network_fetchlocal__prune_load_remote_prune_config(void);
extern void test_network_fetchlocal__prune_load_fetch_prune_config(void);
extern void test_network_fetchlocal__update_tips_error_is_propagated(void);
extern void test_network_fetchlocal__cleanup(void);
extern void test_network_refspecs__parsing(void);
extern void test_network_refspecs__transform_mid_star(void);
extern void test_network_refspecs__transform_loosened_star(void);
extern void test_network_refspecs__transform_nested_star(void);
extern void test_network_refspecs__no_dst(void);
extern void test_network_refspecs__invalid(void);
extern void test_network_refspecs__invalid_reverse(void);
extern void test_network_refspecs__matching(void);
extern void test_network_refspecs__parse_free(void);
extern void test_network_remote_defaultbranch__master(void);
extern void test_network_remote_defaultbranch__master_does_not_win(void);
extern void test_network_remote_defaultbranch__master_on_detached(void);
extern void test_network_remote_defaultbranch__no_default_branch(void);
extern void test_network_remote_defaultbranch__detached_sharing_nonbranch_id(void);
extern void test_network_remote_defaultbranch__unborn_HEAD_with_branches(void);
extern void test_network_remote_defaultbranch__initialize(void);
extern void test_network_remote_defaultbranch__cleanup(void);
extern void test_network_remote_delete__remove_remote_tracking_branches(void);
extern void test_network_remote_delete__remove_remote_configuration_settings(void);
extern void test_network_remote_delete__remove_branch_upstream_configuration_settings(void);
extern void test_network_remote_delete__initialize(void);
extern void test_network_remote_delete__cleanup(void);
extern void test_network_remote_isvalidname__can_detect_invalid_formats(void);
extern void test_network_remote_isvalidname__wont_hopefully_choke_on_valid_formats(void);
extern void test_network_remote_local__connected(void);
extern void test_network_remote_local__retrieve_advertised_references(void);
extern void test_network_remote_local__retrieve_advertised_before_connect(void);
extern void test_network_remote_local__retrieve_advertised_references_after_disconnect(void);
extern void test_network_remote_local__retrieve_advertised_references_from_spaced_repository(void);
extern void test_network_remote_local__nested_tags_are_completely_peeled(void);
extern void test_network_remote_local__shorthand_fetch_refspec0(void);
extern void test_network_remote_local__shorthand_fetch_refspec1(void);
extern void test_network_remote_local__tagopt(void);
extern void test_network_remote_local__push_to_bare_remote(void);
extern void test_network_remote_local__push_to_bare_remote_with_file_url(void);
extern void test_network_remote_local__push_to_non_bare_remote(void);
extern void test_network_remote_local__fetch(void);
extern void test_network_remote_local__reflog(void);
extern void test_network_remote_local__fetch_default_reflog_message(void);
extern void test_network_remote_local__opportunistic_update(void);
extern void test_network_remote_local__update_tips_for_new_remote(void);
extern void test_network_remote_local__push_delete(void);
extern void test_network_remote_local__anonymous_remote_inmemory_repo(void);
extern void test_network_remote_local__initialize(void);
extern void test_network_remote_local__cleanup(void);
extern void test_network_remote_push__delete_notification(void);
extern void test_network_remote_push__create_notification(void);
extern void test_network_remote_push__initialize(void);
extern void test_network_remote_push__cleanup(void);
extern void test_network_remote_remotes__parsing(void);
extern void test_network_remote_remotes__remote_ready(void);
extern void test_network_remote_remotes__urlresolve(void);
extern void test_network_remote_remotes__urlresolve_passthrough(void);
extern void test_network_remote_remotes__instance_url(void);
extern void test_network_remote_remotes__pushurl(void);
extern void test_network_remote_remotes__error_when_not_found(void);
extern void test_network_remote_remotes__error_when_no_push_available(void);
extern void test_network_remote_remotes__refspec_parsing(void);
extern void test_network_remote_remotes__add_fetchspec(void);
extern void test_network_remote_remotes__dup(void);
extern void test_network_remote_remotes__add_pushspec(void);
extern void test_network_remote_remotes__fnmatch(void);
extern void test_network_remote_remotes__transform(void);
extern void test_network_remote_remotes__transform_destination_to_source(void);
extern void test_network_remote_remotes__missing_refspecs(void);
extern void test_network_remote_remotes__nonmatch_upstream_refspec(void);
extern void test_network_remote_remotes__list(void);
extern void test_network_remote_remotes__loading_a_missing_remote_returns_ENOTFOUND(void);
extern void test_network_remote_remotes__loading_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_network_remote_remotes__add(void);
extern void test_network_remote_remotes__tagopt(void);
extern void test_network_remote_remotes__can_load_with_an_empty_url(void);
extern void test_network_remote_remotes__can_load_with_only_an_empty_pushurl(void);
extern void test_network_remote_remotes__returns_ENOTFOUND_when_neither_url_nor_pushurl(void);
extern void test_network_remote_remotes__query_refspecs(void);
extern void test_network_remote_remotes__initialize(void);
extern void test_network_remote_remotes__cleanup(void);
extern void test_network_remote_rename__renaming_a_remote_moves_related_configuration_section(void);
extern void test_network_remote_rename__renaming_a_remote_updates_branch_related_configuration_entries(void);
extern void test_network_remote_rename__renaming_a_remote_updates_default_fetchrefspec(void);
extern void test_network_remote_rename__renaming_a_remote_without_a_fetchrefspec_doesnt_create_one(void);
extern void test_network_remote_rename__renaming_a_remote_notifies_of_non_default_fetchrefspec(void);
extern void test_network_remote_rename__new_name_can_contain_dots(void);
extern void test_network_remote_rename__new_name_must_conform_to_reference_naming_conventions(void);
extern void test_network_remote_rename__renamed_name_is_persisted(void);
extern void test_network_remote_rename__cannot_overwrite_an_existing_remote(void);
extern void test_network_remote_rename__renaming_a_remote_moves_the_underlying_reference(void);
extern void test_network_remote_rename__overwrite_ref_in_target(void);
extern void test_network_remote_rename__nonexistent_returns_enotfound(void);
extern void test_network_remote_rename__symref_head(void);
extern void test_network_remote_rename__initialize(void);
extern void test_network_remote_rename__cleanup(void);
extern void test_notes_notes__can_create_a_note(void);
extern void test_notes_notes__can_create_a_note_from_commit(void);
extern void test_notes_notes__can_create_a_note_from_commit_given_an_existing_commit(void);
extern void test_notes_notes__can_retrieve_a_list_of_notes_for_a_given_namespace(void);
extern void test_notes_notes__can_cancel_foreach(void);
extern void test_notes_notes__retrieving_a_list_of_notes_for_an_unknown_namespace_returns_ENOTFOUND(void);
extern void test_notes_notes__inserting_a_note_without_passing_a_namespace_uses_the_default_namespace(void);
extern void test_notes_notes__can_insert_a_note_with_a_custom_namespace(void);
extern void test_notes_notes__creating_a_note_on_a_target_which_already_has_one_returns_EEXISTS(void);
extern void test_notes_notes__creating_a_note_on_a_target_can_overwrite_existing_note(void);
extern void test_notes_notes__can_read_a_note(void);
extern void test_notes_notes__can_read_a_note_from_a_commit(void);
extern void test_notes_notes__attempt_to_read_a_note_from_a_commit_with_no_note_fails(void);
extern void test_notes_notes__can_insert_a_note_in_an_existing_fanout(void);
extern void test_notes_notes__can_read_a_note_in_an_existing_fanout(void);
extern void test_notes_notes__can_remove_a_note(void);
extern void test_notes_notes__can_remove_a_note_from_commit(void);
extern void test_notes_notes__can_remove_a_note_in_an_existing_fanout(void);
extern void test_notes_notes__removing_a_note_which_doesnt_exists_returns_ENOTFOUND(void);
extern void test_notes_notes__can_iterate_default_namespace(void);
extern void test_notes_notes__can_iterate_custom_namespace(void);
extern void test_notes_notes__empty_iterate(void);
extern void test_notes_notes__iterate_from_commit(void);
extern void test_notes_notes__initialize(void);
extern void test_notes_notes__cleanup(void);
extern void test_notes_notesref__config_corenotesref(void);
extern void test_notes_notesref__initialize(void);
extern void test_notes_notesref__cleanup(void);
extern void test_object_blob_filter__unfiltered(void);
extern void test_object_blob_filter__stats(void);
extern void test_object_blob_filter__to_odb(void);
extern void test_object_blob_filter__initialize(void);
extern void test_object_blob_filter__cleanup(void);
extern void test_object_blob_fromstream__multiple_write(void);
extern void test_object_blob_fromstream__creating_a_blob_from_chunks_honors_the_attributes_directives(void);
extern void test_object_blob_fromstream__initialize(void);
extern void test_object_blob_fromstream__cleanup(void);
extern void test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_file_located_in_the_working_directory(void);
extern void test_object_blob_write__can_create_a_blob_in_a_standard_repo_from_a_absolute_filepath_pointing_outside_of_the_working_directory(void);
extern void test_object_blob_write__can_create_a_blob_in_a_bare_repo_from_a_absolute_filepath(void);
extern void test_object_blob_write__cleanup(void);
extern void test_object_cache__cache_counts(void);
extern void test_object_cache__threadmania(void);
extern void test_object_cache__fast_thread_rush(void);
extern void test_object_cache__initialize_cache_no_blobs(void);
extern void test_object_cache__initialize_cache_tiny_blobs(void);
extern void test_object_cache__initialize_cache_all_blobs(void);
extern void test_object_cache__initialize_cache_no_trees(void);
extern void test_object_cache__cleanup(void);
extern void test_object_commit_commitstagedfile__generate_predictable_object_ids(void);
extern void test_object_commit_commitstagedfile__amend_commit(void);
extern void test_object_commit_commitstagedfile__initialize(void);
extern void test_object_commit_commitstagedfile__cleanup(void);
extern void test_object_commit_parse__sha1_parsing_commit_succeeds(void);
extern void test_object_commit_parse__sha1_parsing_commit_without_encoding_succeeds(void);
extern void test_object_commit_parse__sha1_parsing_commit_with_multiple_authors_succeeds(void);
extern void test_object_commit_parse__sha1_parsing_commit_with_multiple_committers_succeeds(void);
extern void test_object_commit_parse__sha1_parsing_commit_without_message_succeeds(void);
extern void test_object_commit_parse__sha1_parsing_commit_with_unknown_fields_succeeds(void);
extern void test_object_commit_parse__sha1_parsing_commit_with_invalid_tree_fails(void);
extern void test_object_commit_parse__sha1_parsing_commit_with_sha256_tree_fails(void);
extern void test_object_commit_parse__sha1_parsing_commit_without_tree_fails(void);
extern void test_object_commit_parse__sha1_parsing_commit_without_author_fails(void);
extern void test_object_commit_parse__sha1_parsing_commit_without_committer_fails(void);
extern void test_object_commit_parse__sha1_parsing_encoding_will_not_cause_oob_read(void);
extern void test_object_commit_parse__sha256_parsing_commit_succeeds(void);
extern void test_object_commit_parse__sha256_parsing_commit_without_encoding_succeeds(void);
extern void test_object_commit_parse__sha256_parsing_commit_with_multiple_authors_succeeds(void);
extern void test_object_commit_parse__sha256_parsing_commit_with_multiple_committers_succeeds(void);
extern void test_object_commit_parse__sha256_parsing_commit_without_message_succeeds(void);
extern void test_object_commit_parse__sha256_parsing_commit_with_unknown_fields_succeeds(void);
extern void test_object_commit_parse__sha256_parsing_commit_with_invalid_tree_fails(void);
extern void test_object_commit_parse__sha256_parsing_commit_with_sha1_tree_fails(void);
extern void test_object_commit_parse__sha256_parsing_commit_without_tree_fails(void);
extern void test_object_commit_parse__sha256_parsing_commit_without_author_fails(void);
extern void test_object_commit_parse__sha256_parsing_commit_without_committer_fails(void);
extern void test_object_commit_parse__sha256_parsing_encoding_will_not_cause_oob_read(void);
extern void test_object_lookup__lookup_wrong_type_returns_enotfound(void);
extern void test_object_lookup__lookup_nonexisting_returns_enotfound(void);
extern void test_object_lookup__lookup_wrong_type_by_abbreviated_id_returns_enotfound(void);
extern void test_object_lookup__lookup_wrong_type_eventually_returns_enotfound(void);
extern void test_object_lookup__lookup_corrupt_object_returns_error(void);
extern void test_object_lookup__lookup_object_with_wrong_hash_returns_error(void);
extern void test_object_lookup__initialize(void);
extern void test_object_lookup__cleanup(void);
extern void test_object_lookup256__lookup_wrong_type_returns_enotfound(void);
extern void test_object_lookup256__lookup_nonexisting_returns_enotfound(void);
extern void test_object_lookup256__lookup_wrong_type_by_abbreviated_id_returns_enotfound(void);
extern void test_object_lookup256__lookup_wrong_type_eventually_returns_enotfound(void);
extern void test_object_lookup256__lookup_corrupt_object_returns_error(void);
extern void test_object_lookup256__lookup_object_with_wrong_hash_returns_error(void);
extern void test_object_lookup256__initialize(void);
extern void test_object_lookup256__cleanup(void);
extern void test_object_lookupbypath__errors(void);
extern void test_object_lookupbypath__from_root_tree(void);
extern void test_object_lookupbypath__from_head_commit(void);
extern void test_object_lookupbypath__from_subdir_tree(void);
extern void test_object_lookupbypath__initialize(void);
extern void test_object_lookupbypath__cleanup(void);
extern void test_object_message__long_lines_without_spaces_should_be_unchanged(void);
extern void test_object_message__lines_with_spaces_at_the_beginning_should_be_unchanged(void);
extern void test_object_message__lines_with_intermediate_spaces_should_be_unchanged(void);
extern void test_object_message__consecutive_blank_lines_should_be_unified(void);
extern void test_object_message__only_consecutive_blank_lines_should_be_completely_removed(void);
extern void test_object_message__consecutive_blank_lines_at_the_beginning_should_be_removed(void);
extern void test_object_message__consecutive_blank_lines_at_the_end_should_be_removed(void);
extern void test_object_message__text_without_newline_at_end_should_end_with_newline(void);
extern void test_object_message__text_plus_spaces_without_newline_should_not_show_spaces_and_end_with_newline(void);
extern void test_object_message__text_plus_spaces_ending_with_newline_should_be_cleaned_and_newline_must_remain(void);
extern void test_object_message__spaces_with_newline_at_end_should_be_replaced_with_empty_string(void);
extern void test_object_message__spaces_without_newline_at_end_should_be_replaced_with_empty_string(void);
extern void test_object_message__consecutive_text_lines_should_be_unchanged(void);
extern void test_object_message__strip_comments(void);
extern void test_object_message__keep_comments(void);
extern void test_object_message__message_prettify(void);
extern void test_object_peel__peeling_an_object_into_its_own_type_returns_another_instance_of_it(void);
extern void test_object_peel__tag(void);
extern void test_object_peel__commit(void);
extern void test_object_peel__tree(void);
extern void test_object_peel__blob(void);
extern void test_object_peel__target_any_object_for_type_change(void);
extern void test_object_peel__initialize(void);
extern void test_object_peel__cleanup(void);
extern void test_object_raw_chars__find_invalid_chars_in_oid(void);
extern void test_object_raw_chars__build_valid_oid_from_raw_bytes(void);
extern void test_object_raw_compare__succeed_on_copy_oid(void);
extern void test_object_raw_compare__succeed_on_oid_comparison_lesser(void);
extern void test_object_raw_compare__succeed_on_oid_comparison_equal(void);
extern void test_object_raw_compare__succeed_on_oid_comparison_greater(void);
extern void test_object_raw_compare__compare_fmt_oids(void);
extern void test_object_raw_compare__compare_static_oids(void);
extern void test_object_raw_compare__compare_pathfmt_oids(void);
extern void test_object_raw_convert__succeed_on_oid_to_string_conversion(void);
extern void test_object_raw_convert__succeed_on_oid_to_string_conversion_big(void);
extern void test_object_raw_convert__convert_oid_partially(void);
extern void test_object_raw_fromstr__fail_on_invalid_oid_string(void);
extern void test_object_raw_fromstr__succeed_on_valid_oid_string(void);
extern void test_object_raw_hash__hash_by_blocks(void);
extern void test_object_raw_hash__hash_buffer_in_single_call(void);
extern void test_object_raw_hash__hash_vector(void);
extern void test_object_raw_hash__hash_junk_data(void);
extern void test_object_raw_hash__hash_commit_object(void);
extern void test_object_raw_hash__hash_tree_object(void);
extern void test_object_raw_hash__hash_tag_object(void);
extern void test_object_raw_hash__hash_zero_length_object(void);
extern void test_object_raw_hash__hash_one_byte_object(void);
extern void test_object_raw_hash__hash_two_byte_object(void);
extern void test_object_raw_hash__hash_multi_byte_object(void);
extern void test_object_raw_short__oid_shortener_no_duplicates(void);
extern void test_object_raw_short__oid_shortener_stresstest_git_oid_shorten(void);
extern void test_object_raw_short__oid_shortener_too_much_oids(void);
extern void test_object_raw_size__validate_oid_size(void);
extern void test_object_raw_type2string__convert_type_to_string(void);
extern void test_object_raw_type2string__convert_string_to_type(void);
extern void test_object_raw_type2string__check_type_is_loose(void);
extern void test_object_raw_write__loose_object(void);
extern void test_object_raw_write__loose_tree(void);
extern void test_object_raw_write__loose_tag(void);
extern void test_object_raw_write__zero_length(void);
extern void test_object_raw_write__one_byte(void);
extern void test_object_raw_write__two_byte(void);
extern void test_object_raw_write__several_bytes(void);
extern void test_object_shortid__select(void);
extern void test_object_shortid__initialize(void);
extern void test_object_shortid__cleanup(void);
extern void test_object_tag_list__list_all(void);
extern void test_object_tag_list__list_by_pattern(void);
extern void test_object_tag_list__initialize(void);
extern void test_object_tag_list__cleanup(void);
extern void test_object_tag_parse__valid_tag_parses(void);
extern void test_object_tag_parse__missing_tagger_parses(void);
extern void test_object_tag_parse__missing_message_parses(void);
extern void test_object_tag_parse__unknown_field_parses(void);
extern void test_object_tag_parse__missing_object_fails(void);
extern void test_object_tag_parse__malformatted_object_fails(void);
extern void test_object_tag_parse__missing_type_fails(void);
extern void test_object_tag_parse__invalid_type_fails(void);
extern void test_object_tag_parse__missing_tagname_fails(void);
extern void test_object_tag_parse__misformatted_tagger_fails(void);
extern void test_object_tag_parse__missing_message_fails(void);
extern void test_object_tag_parse__no_oob_read_when_searching_message(void);
extern void test_object_tag_peel__can_peel_to_a_commit(void);
extern void test_object_tag_peel__can_peel_several_nested_tags_to_a_commit(void);
extern void test_object_tag_peel__can_peel_to_a_non_commit(void);
extern void test_object_tag_peel__initialize(void);
extern void test_object_tag_peel__cleanup(void);
extern void test_object_tag_read__parse(void);
extern void test_object_tag_read__parse_without_tagger(void);
extern void test_object_tag_read__parse_without_message(void);
extern void test_object_tag_read__without_tagger_nor_message(void);
extern void test_object_tag_read__extra_header_fields(void);
extern void test_object_tag_read__initialize(void);
extern void test_object_tag_read__cleanup(void);
extern void test_object_tag_write__basic(void);
extern void test_object_tag_write__overwrite(void);
extern void test_object_tag_write__replace(void);
extern void test_object_tag_write__lightweight(void);
extern void test_object_tag_write__lightweight_over_existing(void);
extern void test_object_tag_write__delete(void);
extern void test_object_tag_write__creating_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_object_tag_write__deleting_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_object_tag_write__creating_an_annotation_stores_the_new_object_in_the_odb(void);
extern void test_object_tag_write__creating_an_annotation_does_not_create_a_reference(void);
extern void test_object_tag_write__error_when_create_tag_with_invalid_name(void);
extern void test_object_tag_write__initialize(void);
extern void test_object_tag_write__cleanup(void);
extern void test_object_tree_attributes__ensure_correctness_of_attributes_on_insertion(void);
extern void test_object_tree_attributes__group_writable_tree_entries_created_with_an_antique_git_version_can_still_be_accessed(void);
extern void test_object_tree_attributes__treebuilder_reject_invalid_filemode(void);
extern void test_object_tree_attributes__normalize_attributes_when_creating_a_tree_from_an_existing_one(void);
extern void test_object_tree_attributes__normalize_600(void);
extern void test_object_tree_attributes__initialize(void);
extern void test_object_tree_attributes__cleanup(void);
extern void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_through_the_treebuilder(void);
extern void test_object_tree_duplicateentries__cannot_create_a_duplicate_entry_building_a_tree_from_a_index_with_conflicts(void);
extern void test_object_tree_duplicateentries__initialize(void);
extern void test_object_tree_duplicateentries__cleanup(void);
extern void test_object_tree_frompath__retrieve_tree_from_path_to_treeentry(void);
extern void test_object_tree_frompath__fail_when_processing_an_invalid_path(void);
extern void test_object_tree_frompath__initialize(void);
extern void test_object_tree_frompath__cleanup(void);
extern void test_object_tree_parse__single_blob_parses(void);
extern void test_object_tree_parse__single_tree_parses(void);
extern void test_object_tree_parse__leading_filename_spaces_parse(void);
extern void test_object_tree_parse__multiple_entries_parse(void);
extern void test_object_tree_parse__invalid_mode_fails(void);
extern void test_object_tree_parse__missing_mode_fails(void);
extern void test_object_tree_parse__mode_doesnt_cause_oob_read(void);
extern void test_object_tree_parse__unreasonably_large_mode_fails(void);
extern void test_object_tree_parse__missing_filename_separator_fails(void);
extern void test_object_tree_parse__missing_filename_terminator_fails(void);
extern void test_object_tree_parse__empty_filename_fails(void);
extern void test_object_tree_parse__trailing_garbage_fails(void);
extern void test_object_tree_parse__leading_space_fails(void);
extern void test_object_tree_parse__truncated_oid_fails(void);
extern void test_object_tree_read__loaded(void);
extern void test_object_tree_read__two(void);
extern void test_object_tree_read__largefile(void);
extern void test_object_tree_read__initialize(void);
extern void test_object_tree_read__cleanup(void);
extern void test_object_tree_update__remove_blob(void);
extern void test_object_tree_update__remove_blob_deeper(void);
extern void test_object_tree_update__remove_all_entries(void);
extern void test_object_tree_update__replace_blob(void);
extern void test_object_tree_update__add_blobs(void);
extern void test_object_tree_update__add_blobs_unsorted(void);
extern void test_object_tree_update__add_conflict(void);
extern void test_object_tree_update__add_conflict2(void);
extern void test_object_tree_update__remove_invalid_submodule(void);
extern void test_object_tree_update__initialize(void);
extern void test_object_tree_update__cleanup(void);
extern void test_object_tree_walk__0(void);
extern void test_object_tree_walk__1(void);
extern void test_object_tree_walk__2(void);
extern void test_object_tree_walk__initialize(void);
extern void test_object_tree_walk__cleanup(void);
extern void test_object_tree_write__from_memory(void);
extern void test_object_tree_write__subtree(void);
extern void test_object_tree_write__sorted_subtrees(void);
extern void test_object_tree_write__removing_and_re_adding_in_treebuilder(void);
extern void test_object_tree_write__filtering(void);
extern void test_object_tree_write__cruel_paths(void);
extern void test_object_tree_write__protect_filesystems(void);
extern void test_object_tree_write__object_validity(void);
extern void test_object_tree_write__invalid_null_oid(void);
extern void test_object_tree_write__initialize(void);
extern void test_object_tree_write__cleanup(void);
extern void test_object_validate__valid_sha1(void);
extern void test_object_validate__cannot_parse_sha256_as_sha1(void);
extern void test_object_validate__invalid_sha1(void);
extern void test_object_validate__valid_sha256(void);
extern void test_object_validate__invalid_sha256(void);
extern void test_object_validate__cannot_parse_sha1_as_sha256(void);
extern void test_odb_alternates__chained(void);
extern void test_odb_alternates__long_chain(void);
extern void test_odb_alternates__cleanup(void);
extern void test_odb_backend_loose__read_from_odb(void);
extern void test_odb_backend_loose__read_from_repo(void);
extern void test_odb_backend_loose__initialize(void);
extern void test_odb_backend_loose__cleanup(void);
extern void test_odb_backend_mempack__write_succeeds(void);
extern void test_odb_backend_mempack__read_of_missing_object_fails(void);
extern void test_odb_backend_mempack__exists_of_missing_object_fails(void);
extern void test_odb_backend_mempack__exists_with_existing_objects_succeeds(void);
extern void test_odb_backend_mempack__blob_create_from_buffer_succeeds(void);
extern void test_odb_backend_mempack__initialize(void);
extern void test_odb_backend_mempack__cleanup(void);
extern void test_odb_backend_multiple__read_with_empty_first_succeeds(void);
extern void test_odb_backend_multiple__read_with_first_matching_stops(void);
extern void test_odb_backend_multiple__read_prefix_with_first_empty_succeeds(void);
extern void test_odb_backend_multiple__read_prefix_with_first_matching_reads_both(void);
extern void test_odb_backend_multiple__read_prefix_with_first_matching_succeeds_without_hash_verification(void);
extern void test_odb_backend_multiple__initialize(void);
extern void test_odb_backend_multiple__cleanup(void);
extern void test_odb_backend_nobackend__write_fails_gracefully(void);
extern void test_odb_backend_nobackend__initialize(void);
extern void test_odb_backend_nobackend__cleanup(void);
extern void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__read_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_failure(void);
extern void test_odb_backend_nonrefreshing__exists_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__read_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__readprefix_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__readheader_is_invoked_once_on_success(void);
extern void test_odb_backend_nonrefreshing__read_is_invoked_once_when_revparsing_a_full_oid(void);
extern void test_odb_backend_nonrefreshing__initialize(void);
extern void test_odb_backend_nonrefreshing__cleanup(void);
extern void test_odb_backend_refreshing__exists_is_invoked_twice_on_failure(void);
extern void test_odb_backend_refreshing__read_is_invoked_twice_on_failure(void);
extern void test_odb_backend_refreshing__readprefix_is_invoked_twice_on_failure(void);
extern void test_odb_backend_refreshing__readheader_is_invoked_twice_on_failure(void);
extern void test_odb_backend_refreshing__exists_is_invoked_once_on_success(void);
extern void test_odb_backend_refreshing__read_is_invoked_once_on_success(void);
extern void test_odb_backend_refreshing__readprefix_is_invoked_once_on_success(void);
extern void test_odb_backend_refreshing__readheader_is_invoked_once_on_success(void);
extern void test_odb_backend_refreshing__read_is_invoked_twice_when_revparsing_a_full_oid(void);
extern void test_odb_backend_refreshing__refresh_is_invoked(void);
extern void test_odb_backend_refreshing__refresh_suppressed_with_no_refresh(void);
extern void test_odb_backend_refreshing__initialize(void);
extern void test_odb_backend_refreshing__cleanup(void);
extern void test_odb_backend_simple__read_of_object_succeeds(void);
extern void test_odb_backend_simple__read_of_nonexisting_object_fails(void);
extern void test_odb_backend_simple__read_with_hash_mismatch_fails(void);
extern void test_odb_backend_simple__read_with_hash_mismatch_succeeds_without_verification(void);
extern void test_odb_backend_simple__read_prefix_succeeds(void);
extern void test_odb_backend_simple__read_prefix_of_nonexisting_object_fails(void);
extern void test_odb_backend_simple__read_with_ambiguous_prefix_fails(void);
extern void test_odb_backend_simple__read_with_highly_ambiguous_prefix(void);
extern void test_odb_backend_simple__exists_succeeds(void);
extern void test_odb_backend_simple__exists_fails_for_nonexisting_object(void);
extern void test_odb_backend_simple__exists_prefix_succeeds(void);
extern void test_odb_backend_simple__exists_with_ambiguous_prefix_fails(void);
extern void test_odb_backend_simple__exists_with_highly_ambiguous_prefix(void);
extern void test_odb_backend_simple__null_oid_is_ignored(void);
extern void test_odb_backend_simple__initialize(void);
extern void test_odb_backend_simple__cleanup(void);
extern void test_odb_emptyobjects__blob_notfound(void);
extern void test_odb_emptyobjects__read_tree(void);
extern void test_odb_emptyobjects__read_tree_odb(void);
extern void test_odb_emptyobjects__initialize(void);
extern void test_odb_emptyobjects__cleanup(void);
extern void test_odb_foreach__foreach(void);
extern void test_odb_foreach__one_pack(void);
extern void test_odb_foreach__interrupt_foreach(void);
extern void test_odb_foreach__files_in_objects_dir(void);
extern void test_odb_foreach__cleanup(void);
extern void test_odb_freshen__loose_blob(void);
extern void test_odb_freshen__readonly_object(void);
extern void test_odb_freshen__loose_tree(void);
extern void test_odb_freshen__tree_during_commit(void);
extern void test_odb_freshen__packed_object(void);
extern void test_odb_freshen__initialize(void);
extern void test_odb_freshen__cleanup(void);
extern void test_odb_largefiles__write_from_memory(void);
extern void test_odb_largefiles__streamwrite(void);
extern void test_odb_largefiles__streamread(void);
extern void test_odb_largefiles__read_into_memory(void);
extern void test_odb_largefiles__read_into_memory_rejected_on_32bit(void);
extern void test_odb_largefiles__read_header(void);
extern void test_odb_largefiles__initialize(void);
extern void test_odb_largefiles__cleanup(void);
extern void test_odb_loose__exists_sha1(void);
extern void test_odb_loose__exists_sha256(void);
extern void test_odb_loose__simple_reads_sha1(void);
extern void test_odb_loose__simple_reads_sha256(void);
extern void test_odb_loose__streaming_reads_sha1(void);
extern void test_odb_loose__streaming_reads_sha256(void);
extern void test_odb_loose__read_header_sha1(void);
extern void test_odb_loose__read_header_sha256(void);
extern void test_odb_loose__permissions_standard(void);
extern void test_odb_loose__permissions_readonly(void);
extern void test_odb_loose__permissions_readwrite(void);
extern void test_odb_loose__does_not_fsync_by_default(void);
extern void test_odb_loose__fsync_obeys_odb_option(void);
extern void test_odb_loose__fsync_obeys_global_setting(void);
extern void test_odb_loose__fsync_obeys_repo_setting(void);
extern void test_odb_loose__initialize(void);
extern void test_odb_loose__cleanup(void);
extern void test_odb_mixed__dup_oid(void);
extern void test_odb_mixed__dup_oid_prefix_0(void);
extern void test_odb_mixed__expand_ids(void);
extern void test_odb_mixed__expand_ids_cached(void);
extern void test_odb_mixed__initialize(void);
extern void test_odb_mixed__cleanup(void);
extern void test_odb_open__exists(void);
extern void test_odb_open__initialize(void);
extern void test_odb_open__cleanup(void);
extern void test_odb_packed__mass_read(void);
extern void test_odb_packed__read_header_0(void);
extern void test_odb_packed__read_header_1(void);
extern void test_odb_packed__initialize(void);
extern void test_odb_packed__cleanup(void);
extern void test_odb_packed256__mass_read(void);
extern void test_odb_packed256__read_header_0(void);
extern void test_odb_packed256__read_header_1(void);
extern void test_odb_packed256__initialize(void);
extern void test_odb_packed256__cleanup(void);
extern void test_odb_packedone__mass_read(void);
extern void test_odb_packedone__read_header_0(void);
extern void test_odb_packedone__initialize(void);
extern void test_odb_packedone__cleanup(void);
extern void test_odb_packedone256__mass_read(void);
extern void test_odb_packedone256__read_header_0(void);
extern void test_odb_packedone256__initialize(void);
extern void test_odb_packedone256__cleanup(void);
extern void test_odb_sorting__basic_backends_sorting(void);
extern void test_odb_sorting__alternate_backends_sorting(void);
extern void test_odb_sorting__override_default_backend_priority(void);
extern void test_odb_sorting__initialize(void);
extern void test_odb_sorting__cleanup(void);
extern void test_odb_streamwrite__can_accept_chunks(void);
extern void test_odb_streamwrite__can_detect_missing_bytes(void);
extern void test_odb_streamwrite__can_detect_additional_bytes(void);
extern void test_odb_streamwrite__initialize(void);
extern void test_odb_streamwrite__cleanup(void);
extern void test_online_badssl__expired(void);
extern void test_online_badssl__wrong_host(void);
extern void test_online_badssl__self_signed(void);
extern void test_online_badssl__old_cipher(void);
extern void test_online_clone__network_full(void);
extern void test_online_clone__network_bare(void);
extern void test_online_clone__empty_repository(void);
extern void test_online_clone__can_checkout_a_cloned_repo(void);
extern void test_online_clone__clone_mirror(void);
extern void test_online_clone__custom_remote_callbacks(void);
extern void test_online_clone__custom_headers(void);
extern void test_online_clone__long_custom_header(void);
extern void test_online_clone__cred_callback_failure_return_code_is_tunnelled(void);
extern void test_online_clone__cred_callback_called_again_on_auth_failure(void);
extern void test_online_clone__credentials(void);
extern void test_online_clone__credentials_via_custom_headers(void);
extern void test_online_clone__bitbucket_style(void);
extern void test_online_clone__bitbucket_uses_creds_in_url(void);
extern void test_online_clone__bitbucket_falls_back_to_specified_creds(void);
extern void test_online_clone__googlesource(void);
extern void test_online_clone__can_cancel(void);
extern void test_online_clone__ssh_github(void);
extern void test_online_clone__ssh_auth_methods(void);
extern void test_online_clone__ssh_certcheck_accepts_unknown(void);
extern void test_online_clone__ssh_certcheck_override_knownhosts(void);
extern void test_online_clone__ssh_with_paths(void);
extern void test_online_clone__ssh_cannot_change_username(void);
extern void test_online_clone__ssh_cert(void);
extern void test_online_clone__ssh_memory_auth(void);
extern void test_online_clone__certificate_invalid(void);
extern void test_online_clone__certificate_valid(void);
extern void test_online_clone__start_with_http(void);
extern void test_online_clone__proxy_http_host_port_in_opts(void);
extern void test_online_clone__proxy_http_host_port_in_env(void);
extern void test_online_clone__proxy_http_host_port_in_config(void);
extern void test_online_clone__proxy_invalid_url(void);
extern void test_online_clone__proxy_credentials_request(void);
extern void test_online_clone__proxy_credentials_in_well_formed_url(void);
extern void test_online_clone__proxy_credentials_in_host_port_format(void);
extern void test_online_clone__proxy_credentials_in_environment(void);
extern void test_online_clone__proxy_credentials_in_url_https(void);
extern void test_online_clone__proxy_auto_not_detected(void);
extern void test_online_clone__proxy_cred_callback_after_failed_url_creds(void);
extern void test_online_clone__azurerepos(void);
extern void test_online_clone__path_whitespace(void);
extern void test_online_clone__redirect_default_succeeds_for_initial(void);
extern void test_online_clone__redirect_default_fails_for_subsequent(void);
extern void test_online_clone__redirect_none(void);
extern void test_online_clone__redirect_initial_succeeds_for_initial(void);
extern void test_online_clone__redirect_initial_fails_for_subsequent(void);
extern void test_online_clone__namespace_bare(void);
extern void test_online_clone__namespace_with_specified_branch(void);
extern void test_online_clone__sha256(void);
extern void test_online_clone__connect_timeout_configurable(void);
extern void test_online_clone__connect_timeout_default(void);
extern void test_online_clone__timeout_configurable_times_out(void);
extern void test_online_clone__timeout_configurable_succeeds_slowly(void);
extern void test_online_clone__initialize(void);
extern void test_online_clone__cleanup(void);
extern void test_online_customcert__file(void);
extern void test_online_customcert__path(void);
extern void test_online_customcert__initialize(void);
extern void test_online_customcert__cleanup(void);
extern void test_online_fetch__default_http(void);
extern void test_online_fetch__default_https(void);
extern void test_online_fetch__no_tags_git(void);
extern void test_online_fetch__no_tags_http(void);
extern void test_online_fetch__fetch_twice(void);
extern void test_online_fetch__fetch_with_empty_http_proxy(void);
extern void test_online_fetch__doesnt_retrieve_a_pack_when_the_repository_is_up_to_date(void);
extern void test_online_fetch__report_unchanged_tips(void);
extern void test_online_fetch__can_cancel(void);
extern void test_online_fetch__ls_disconnected(void);
extern void test_online_fetch__remote_symrefs(void);
extern void test_online_fetch__twice(void);
extern void test_online_fetch__proxy(void);
extern void test_online_fetch__redirect_config(void);
extern void test_online_fetch__reachable_commit(void);
extern void test_online_fetch__reachable_commit_without_destination(void);
extern void test_online_fetch__initialize(void);
extern void test_online_fetch__cleanup(void);
extern void test_online_fetchhead__wildcard_spec(void);
extern void test_online_fetchhead__explicit_spec(void);
extern void test_online_fetchhead__no_merges(void);
extern void test_online_fetchhead__explicit_dst_refspec_creates_branch(void);
extern void test_online_fetchhead__empty_dst_refspec_creates_no_branch(void);
extern void test_online_fetchhead__colon_only_dst_refspec_creates_no_branch(void);
extern void test_online_fetchhead__creds_get_stripped(void);
extern void test_online_fetchhead__initialize(void);
extern void test_online_fetchhead__cleanup(void);
extern void test_online_push__noop(void);
extern void test_online_push__b1(void);
extern void test_online_push__b2(void);
extern void test_online_push__b3(void);
extern void test_online_push__b4(void);
extern void test_online_push__b5(void);
extern void test_online_push__b5_cancel(void);
extern void test_online_push__multi(void);
extern void test_online_push__implicit_tgt(void);
extern void test_online_push__fast_fwd(void);
extern void test_online_push__tag_commit(void);
extern void test_online_push__tag_tree(void);
extern void test_online_push__tag_blob(void);
extern void test_online_push__tag_lightweight(void);
extern void test_online_push__tag_to_tag(void);
extern void test_online_push__force(void);
extern void test_online_push__options(void);
extern void test_online_push__delete(void);
extern void test_online_push__bad_refspecs(void);
extern void test_online_push__expressions(void);
extern void test_online_push__notes(void);
extern void test_online_push__configured(void);
extern void test_online_push__initialize(void);
extern void test_online_push__cleanup(void);
extern void test_online_remotes__single_branch(void);
extern void test_online_remotes__restricted_refspecs(void);
extern void test_online_remotes__detached_remote_fails_downloading(void);
extern void test_online_remotes__detached_remote_fails_uploading(void);
extern void test_online_remotes__detached_remote_fails_pushing(void);
extern void test_online_remotes__detached_remote_succeeds_ls(void);
extern void test_online_shallow__clone_depth_zero(void);
extern void test_online_shallow__clone_depth_one(void);
extern void test_online_shallow__clone_depth_five(void);
extern void test_online_shallow__unshallow(void);
extern void test_online_shallow__deepen_six(void);
extern void test_online_shallow__shorten_four(void);
extern void test_online_shallow__preserve_unrelated_roots(void);
extern void test_pack_filelimit__open_repo_with_multiple_packfiles(void);
extern void test_pack_filelimit__initialize_tiny(void);
extern void test_pack_filelimit__initialize_medium(void);
extern void test_pack_filelimit__initialize_unlimited(void);
extern void test_pack_filelimit__cleanup(void);
extern void test_pack_indexer__out_of_order(void);
extern void test_pack_indexer__missing_trailer(void);
extern void test_pack_indexer__leaky(void);
extern void test_pack_indexer__fix_thin(void);
extern void test_pack_indexer__corrupt_length(void);
extern void test_pack_indexer__incomplete_pack_fails_with_strict(void);
extern void test_pack_indexer__out_of_order_with_connectivity_checks(void);
extern void test_pack_indexer__no_tmp_files(void);
extern void test_pack_midx__parse(void);
extern void test_pack_midx__lookup(void);
extern void test_pack_midx__writer(void);
extern void test_pack_midx__odb_create(void);
extern void test_pack_packbuilder__create_pack(void);
extern void test_pack_packbuilder__get_name(void);
extern void test_pack_packbuilder__write_default_path(void);
extern void test_pack_packbuilder__permissions_standard(void);
extern void test_pack_packbuilder__permissions_readonly(void);
extern void test_pack_packbuilder__permissions_readwrite(void);
extern void test_pack_packbuilder__does_not_fsync_by_default(void);
extern void test_pack_packbuilder__fsync_global_setting(void);
extern void test_pack_packbuilder__fsync_repo_setting(void);
extern void test_pack_packbuilder__foreach(void);
extern void test_pack_packbuilder__foreach_with_cancel(void);
extern void test_pack_packbuilder__keep_file_check(void);
extern void test_pack_packbuilder__initialize(void);
extern void test_pack_packbuilder__cleanup(void);
extern void test_pack_sharing__open_two_repos(void);
extern void test_pack_threadsafety__open_repo_in_multiple_threads(void);
extern void test_pack_threadsafety__initialize(void);
extern void test_pack_threadsafety__cleanup(void);
extern void test_patch_parse__original_to_change_middle(void);
extern void test_patch_parse__leading_and_trailing_garbage(void);
extern void test_patch_parse__nonpatches_fail_with_notfound(void);
extern void test_patch_parse__invalid_patches_fails(void);
extern void test_patch_parse__no_newline_at_end_of_new_file(void);
extern void test_patch_parse__no_newline_at_end_of_old_file(void);
extern void test_patch_parse__files_with_whitespaces_succeeds(void);
extern void test_patch_parse__lifetime_of_patch_does_not_depend_on_buffer(void);
extern void test_patch_parse__binary_file_with_missing_paths(void);
extern void test_patch_parse__binary_file_with_whitespace_paths(void);
extern void test_patch_parse__binary_file_with_empty_quoted_paths(void);
extern void test_patch_parse__binary_file_path_with_spaces(void);
extern void test_patch_parse__binary_file_path_without_body_paths(void);
extern void test_patch_parse__binary_file_with_truncated_delta(void);
extern void test_patch_parse__memory_leak_on_multiple_paths(void);
extern void test_patch_parse__truncated_no_newline_at_end_of_file(void);
extern void test_patch_parse__line_number_overflow(void);
extern void test_patch_print__change_middle(void);
extern void test_patch_print__change_middle_nocontext(void);
extern void test_patch_print__change_firstline(void);
extern void test_patch_print__change_lastline(void);
extern void test_patch_print__prepend(void);
extern void test_patch_print__prepend_nocontext(void);
extern void test_patch_print__append(void);
extern void test_patch_print__append_nocontext(void);
extern void test_patch_print__prepend_and_append(void);
extern void test_patch_print__to_empty_file(void);
extern void test_patch_print__from_empty_file(void);
extern void test_patch_print__add(void);
extern void test_patch_print__delete(void);
extern void test_patch_print__rename_exact(void);
extern void test_patch_print__rename_exact_with_mode(void);
extern void test_patch_print__rename_similar(void);
extern void test_patch_print__rename_exact_quotedname(void);
extern void test_patch_print__rename_similar_quotedname(void);
extern void test_patch_print__modechange_unchanged(void);
extern void test_patch_print__modechange_modified(void);
extern void test_patch_print__binary_literal(void);
extern void test_patch_print__binary_delta(void);
extern void test_patch_print__binary_add(void);
extern void test_patch_print__binary_delete(void);
extern void test_patch_print__not_reversible(void);
extern void test_patch_print__binary_not_shown(void);
extern void test_patch_print__binary_add_not_shown(void);
extern void test_path_validate__length(void);
extern void test_path_validate__length_with_core_longpath(void);
extern void test_path_validate__cleanup(void);
extern void test_perf_merge__m1(void);
extern void test_rebase_abort__merge(void);
extern void test_rebase_abort__merge_immediately_after_init(void);
extern void test_rebase_abort__merge_by_id(void);
extern void test_rebase_abort__merge_by_revspec(void);
extern void test_rebase_abort__merge_by_id_immediately_after_init(void);
extern void test_rebase_abort__detached_head(void);
extern void test_rebase_abort__old_style_head_file(void);
extern void test_rebase_abort__initialize(void);
extern void test_rebase_abort__cleanup(void);
extern void test_rebase_inmemory__not_in_rebase_state(void);
extern void test_rebase_inmemory__can_resolve_conflicts(void);
extern void test_rebase_inmemory__no_common_ancestor(void);
extern void test_rebase_inmemory__with_directories(void);
extern void test_rebase_inmemory__initialize(void);
extern void test_rebase_inmemory__cleanup(void);
extern void test_rebase_iterator__iterates(void);
extern void test_rebase_iterator__iterates_inmemory(void);
extern void test_rebase_iterator__initialize(void);
extern void test_rebase_iterator__cleanup(void);
extern void test_rebase_merge__next(void);
extern void test_rebase_merge__next_with_conflicts(void);
extern void test_rebase_merge__next_stops_with_iterover(void);
extern void test_rebase_merge__commit(void);
extern void test_rebase_merge__commit_with_id(void);
extern void test_rebase_merge__blocked_when_dirty(void);
extern void test_rebase_merge__commit_updates_rewritten(void);
extern void test_rebase_merge__commit_drops_already_applied(void);
extern void test_rebase_merge__finish(void);
extern void test_rebase_merge__detached_finish(void);
extern void test_rebase_merge__finish_with_ids(void);
extern void test_rebase_merge__no_common_ancestor(void);
extern void test_rebase_merge__copy_notes_off_by_default(void);
extern void test_rebase_merge__copy_notes_specified_in_options(void);
extern void test_rebase_merge__copy_notes_specified_in_config(void);
extern void test_rebase_merge__copy_notes_disabled_in_config(void);
extern void test_rebase_merge__custom_checkout_options(void);
extern void test_rebase_merge__custom_merge_options(void);
extern void test_rebase_merge__with_directories(void);
extern void test_rebase_merge__initialize(void);
extern void test_rebase_merge__cleanup(void);
extern void test_rebase_setup__blocked_when_in_progress(void);
extern void test_rebase_setup__merge(void);
extern void test_rebase_setup__merge_root(void);
extern void test_rebase_setup__merge_onto_and_upstream(void);
extern void test_rebase_setup__merge_onto_upstream_and_branch(void);
extern void test_rebase_setup__merge_onto_upstream_and_branch_by_id(void);
extern void test_rebase_setup__branch_with_merges(void);
extern void test_rebase_setup__orphan_branch(void);
extern void test_rebase_setup__merge_null_branch_uses_HEAD(void);
extern void test_rebase_setup__merge_from_detached(void);
extern void test_rebase_setup__merge_branch_by_id(void);
extern void test_rebase_setup__blocked_for_staged_change(void);
extern void test_rebase_setup__blocked_for_unstaged_change(void);
extern void test_rebase_setup__not_blocked_for_untracked_add(void);
extern void test_rebase_setup__initialize(void);
extern void test_rebase_setup__cleanup(void);
extern void test_rebase_sign__passthrough_create_cb(void);
extern void test_rebase_sign__create_gpg_signed(void);
extern void test_rebase_sign__create_propagates_error(void);
extern void test_rebase_sign__passthrough_signing_cb(void);
extern void test_rebase_sign__gpg_with_no_field(void);
extern void test_rebase_sign__custom_signature_field(void);
extern void test_rebase_sign__initialize(void);
extern void test_rebase_sign__cleanup(void);
extern void test_rebase_submodule__init_untracked(void);
extern void test_rebase_submodule__initialize(void);
extern void test_rebase_submodule__cleanup(void);
extern void test_refs_basic__reference_realloc(void);
extern void test_refs_basic__longpaths(void);
extern void test_refs_basic__initialize(void);
extern void test_refs_basic__cleanup(void);
extern void test_refs_branches_checkedout__simple_repo(void);
extern void test_refs_branches_checkedout__worktree(void);
extern void test_refs_branches_checkedout__head_is_not_checked_out(void);
extern void test_refs_branches_checkedout__master_in_bare_repo_is_not_checked_out(void);
extern void test_refs_branches_create__can_create_a_local_branch(void);
extern void test_refs_branches_create__can_not_create_a_branch_if_its_name_collide_with_an_existing_one(void);
extern void test_refs_branches_create__can_force_create_over_an_existing_branch(void);
extern void test_refs_branches_create__cannot_force_create_over_current_branch_in_nonbare_repo(void);
extern void test_refs_branches_create__can_force_create_over_current_branch_in_bare_repo(void);
extern void test_refs_branches_create__creating_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_branches_create__can_create_branch_with_unicode(void);
extern void test_refs_branches_create__name_vs_namespace(void);
extern void test_refs_branches_create__name_vs_namespace_fail(void);
extern void test_refs_branches_create__error_when_create_branch_with_invalid_name(void);
extern void test_refs_branches_create__initialize(void);
extern void test_refs_branches_create__cleanup(void);
extern void test_refs_branches_delete__can_not_delete_a_branch_pointed_at_by_HEAD(void);
extern void test_refs_branches_delete__can_delete_a_branch_even_if_HEAD_is_missing(void);
extern void test_refs_branches_delete__can_delete_a_branch_when_HEAD_is_unborn(void);
extern void test_refs_branches_delete__can_delete_a_branch_pointed_at_by_detached_HEAD(void);
extern void test_refs_branches_delete__can_delete_a_local_branch(void);
extern void test_refs_branches_delete__can_delete_a_local_branch_with_multivar(void);
extern void test_refs_branches_delete__can_delete_a_remote_branch(void);
extern void test_refs_branches_delete__deleting_a_branch_removes_related_configuration_data(void);
extern void test_refs_branches_delete__removes_reflog(void);
extern void test_refs_branches_delete__removes_empty_folders(void);
extern void test_refs_branches_delete__initialize(void);
extern void test_refs_branches_delete__cleanup(void);
extern void test_refs_branches_ishead__can_tell_if_a_branch_is_pointed_at_by_HEAD(void);
extern void test_refs_branches_ishead__can_properly_handle_unborn_HEAD(void);
extern void test_refs_branches_ishead__can_properly_handle_missing_HEAD(void);
extern void test_refs_branches_ishead__can_tell_if_a_branch_is_not_pointed_at_by_HEAD(void);
extern void test_refs_branches_ishead__wont_be_fooled_by_a_non_branch(void);
extern void test_refs_branches_ishead__only_direct_references_are_considered(void);
extern void test_refs_branches_ishead__initialize(void);
extern void test_refs_branches_ishead__cleanup(void);
extern void test_refs_branches_iterator__retrieve_all_branches(void);
extern void test_refs_branches_iterator__retrieve_remote_branches(void);
extern void test_refs_branches_iterator__retrieve_local_branches(void);
extern void test_refs_branches_iterator__retrieve_remote_symbolic_HEAD_when_present(void);
extern void test_refs_branches_iterator__mix_of_packed_and_loose(void);
extern void test_refs_branches_iterator__initialize(void);
extern void test_refs_branches_iterator__cleanup(void);
extern void test_refs_branches_lookup__can_retrieve_a_local_branch_local(void);
extern void test_refs_branches_lookup__can_retrieve_a_local_branch_all(void);
extern void test_refs_branches_lookup__trying_to_retrieve_a_local_branch_remote(void);
extern void test_refs_branches_lookup__can_retrieve_a_remote_tracking_branch_remote(void);
extern void test_refs_branches_lookup__can_retrieve_a_remote_tracking_branch_all(void);
extern void test_refs_branches_lookup__trying_to_retrieve_a_remote_tracking_branch_local(void);
extern void test_refs_branches_lookup__trying_to_retrieve_an_unknown_branch_returns_ENOTFOUND(void);
extern void test_refs_branches_lookup__trying_to_retrieve_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_branches_lookup__initialize(void);
extern void test_refs_branches_lookup__cleanup(void);
extern void test_refs_branches_move__can_move_a_local_branch(void);
extern void test_refs_branches_move__can_move_a_local_branch_to_a_different_namespace(void);
extern void test_refs_branches_move__can_move_a_local_branch_to_a_partially_colliding_namespace(void);
extern void test_refs_branches_move__can_not_move_a_branch_if_its_destination_name_collide_with_an_existing_one(void);
extern void test_refs_branches_move__moving_a_branch_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_branches_move__can_not_move_a_non_branch(void);
extern void test_refs_branches_move__can_force_move_over_an_existing_branch(void);
extern void test_refs_branches_move__moving_a_branch_moves_related_configuration_data(void);
extern void test_refs_branches_move__moving_the_branch_pointed_at_by_HEAD_updates_HEAD(void);
extern void test_refs_branches_move__can_move_with_unicode(void);
extern void test_refs_branches_move__moves_reflog_correctly(void);
extern void test_refs_branches_move__failed_move_restores_reflog(void);
extern void test_refs_branches_move__initialize(void);
extern void test_refs_branches_move__cleanup(void);
extern void test_refs_branches_name__can_get_local_branch_name(void);
extern void test_refs_branches_name__can_get_remote_branch_name(void);
extern void test_refs_branches_name__error_when_ref_is_no_branch(void);
extern void test_refs_branches_name__is_name_valid(void);
extern void test_refs_branches_name__initialize(void);
extern void test_refs_branches_name__cleanup(void);
extern void test_refs_branches_remote__can_get_remote_for_branch(void);
extern void test_refs_branches_remote__no_matching_remote_returns_error(void);
extern void test_refs_branches_remote__local_remote_returns_error(void);
extern void test_refs_branches_remote__ambiguous_remote_returns_error(void);
extern void test_refs_branches_remote__initialize(void);
extern void test_refs_branches_remote__cleanup(void);
extern void test_refs_branches_upstream__can_retrieve_the_remote_tracking_reference_of_a_local_branch(void);
extern void test_refs_branches_upstream__can_retrieve_the_local_upstream_reference_of_a_local_branch(void);
extern void test_refs_branches_upstream__cannot_retrieve_a_remote_upstream_reference_from_a_non_branch(void);
extern void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_plain_local_branch_returns_GIT_ENOTFOUND(void);
extern void test_refs_branches_upstream__trying_to_retrieve_a_remote_tracking_reference_from_a_branch_with_no_fetchspec_returns_GIT_ENOTFOUND(void);
extern void test_refs_branches_upstream__upstream_remote(void);
extern void test_refs_branches_upstream__upstream_merge(void);
extern void test_refs_branches_upstream__upstream_remote_empty_value(void);
extern void test_refs_branches_upstream__retrieve_a_remote_tracking_reference_from_a_branch_with_no_remote_returns_GIT_ENOTFOUND(void);
extern void test_refs_branches_upstream__set_unset_upstream(void);
extern void test_refs_branches_upstream__no_fetch_refspec(void);
extern void test_refs_branches_upstream__initialize(void);
extern void test_refs_branches_upstream__cleanup(void);
extern void test_refs_branches_upstreamname__can_retrieve_the_remote_tracking_reference_name_of_a_local_branch(void);
extern void test_refs_branches_upstreamname__can_retrieve_the_local_upstream_reference_name_of_a_local_branch(void);
extern void test_refs_branches_upstreamname__initialize(void);
extern void test_refs_branches_upstreamname__cleanup(void);
extern void test_refs_crashes__double_free(void);
extern void test_refs_crashes__empty_packedrefs(void);
extern void test_refs_create__symbolic(void);
extern void test_refs_create__symbolic_with_arbitrary_content(void);
extern void test_refs_create__deep_symbolic(void);
extern void test_refs_create__oid(void);
extern void test_refs_create__oid_unknown_succeeds_without_strict(void);
extern void test_refs_create__oid_unknown_fails_by_default(void);
extern void test_refs_create__propagate_eexists(void);
extern void test_refs_create__existing_dir_propagates_edirectory(void);
extern void test_refs_create__creating_a_reference_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_create__creating_a_loose_ref_with_invalid_windows_name(void);
extern void test_refs_create__does_not_fsync_by_default(void);
extern void test_refs_create__fsyncs_when_global_opt_set(void);
extern void test_refs_create__fsyncs_when_repo_config_set(void);
extern void test_refs_create__initialize(void);
extern void test_refs_create__cleanup(void);
extern void test_refs_delete__packed_loose(void);
extern void test_refs_delete__packed_only(void);
extern void test_refs_delete__remove(void);
extern void test_refs_delete__head(void);
extern void test_refs_delete__initialize(void);
extern void test_refs_delete__cleanup(void);
extern void test_refs_dup__direct(void);
extern void test_refs_dup__symbolic(void);
extern void test_refs_dup__initialize(void);
extern void test_refs_dup__cleanup(void);
extern void test_refs_foreachglob__retrieve_all_refs(void);
extern void test_refs_foreachglob__retrieve_remote_branches(void);
extern void test_refs_foreachglob__retrieve_local_branches(void);
extern void test_refs_foreachglob__retrieve_nonexistant(void);
extern void test_refs_foreachglob__retrieve_partially_named_references(void);
extern void test_refs_foreachglob__can_cancel(void);
extern void test_refs_foreachglob__initialize(void);
extern void test_refs_foreachglob__cleanup(void);
extern void test_refs_isvalidname__can_detect_invalid_formats(void);
extern void test_refs_isvalidname__wont_hopefully_choke_on_valid_formats(void);
extern void test_refs_iterator__list(void);
extern void test_refs_iterator__empty(void);
extern void test_refs_iterator__foreach(void);
extern void test_refs_iterator__foreach_through_symlink(void);
extern void test_refs_iterator__foreach_can_cancel(void);
extern void test_refs_iterator__foreach_name(void);
extern void test_refs_iterator__foreach_name_can_cancel(void);
extern void test_refs_iterator__concurrent_delete(void);
extern void test_refs_iterator__initialize(void);
extern void test_refs_iterator__cleanup(void);
extern void test_refs_list__all(void);
extern void test_refs_list__do_not_retrieve_references_which_name_end_with_a_lock_extension(void);
extern void test_refs_list__initialize(void);
extern void test_refs_list__cleanup(void);
extern void test_refs_listall__from_repository_opened_through_workdir_path(void);
extern void test_refs_listall__from_repository_opened_through_gitdir_path(void);
extern void test_refs_listall__from_repository_with_no_trailing_newline(void);
extern void test_refs_lookup__with_resolve(void);
extern void test_refs_lookup__invalid_name(void);
extern void test_refs_lookup__oid(void);
extern void test_refs_lookup__namespace(void);
extern void test_refs_lookup__dwim_notfound(void);
extern void test_refs_lookup__initialize(void);
extern void test_refs_lookup__cleanup(void);
extern void test_refs_namespaces__get_and_set(void);
extern void test_refs_namespaces__namespace_doesnt_show_normal_refs(void);
extern void test_refs_namespaces__initialize(void);
extern void test_refs_namespaces__cleanup(void);
extern void test_refs_normalize__can_normalize_a_direct_reference_name(void);
extern void test_refs_normalize__cannot_normalize_any_direct_reference_name(void);
extern void test_refs_normalize__symbolic(void);
extern void test_refs_normalize__jgit_suite(void);
extern void test_refs_normalize__buffer_has_to_be_big_enough_to_hold_the_normalized_version(void);
extern void test_refs_normalize__refspec_pattern(void);
extern void test_refs_overwrite__symbolic(void);
extern void test_refs_overwrite__object_id(void);
extern void test_refs_overwrite__object_id_with_symbolic(void);
extern void test_refs_overwrite__symbolic_with_object_id(void);
extern void test_refs_overwrite__initialize(void);
extern void test_refs_overwrite__cleanup(void);
extern void test_refs_pack__empty(void);
extern void test_refs_pack__loose(void);
extern void test_refs_pack__symbolic(void);
extern void test_refs_pack__initialize(void);
extern void test_refs_pack__cleanup(void);
extern void test_refs_peel__can_peel_a_tag(void);
extern void test_refs_peel__can_peel_a_branch(void);
extern void test_refs_peel__can_peel_a_symbolic_reference(void);
extern void test_refs_peel__cannot_peel_into_a_non_existing_target(void);
extern void test_refs_peel__can_peel_into_any_non_tag_object(void);
extern void test_refs_peel__can_peel_fully_peeled_packed_refs(void);
extern void test_refs_peel__can_peel_fully_peeled_tag_to_tag(void);
extern void test_refs_peel__initialize(void);
extern void test_refs_peel__cleanup(void);
extern void test_refs_races__create_matching_zero_old(void);
extern void test_refs_races__create_matching(void);
extern void test_refs_races__symbolic_create_matching(void);
extern void test_refs_races__delete(void);
extern void test_refs_races__switch_oid_to_symbolic(void);
extern void test_refs_races__switch_symbolic_to_oid(void);
extern void test_refs_races__initialize(void);
extern void test_refs_races__cleanup(void);
extern void test_refs_read__loose_tag(void);
extern void test_refs_read__nonexisting_tag(void);
extern void test_refs_read__symbolic(void);
extern void test_refs_read__nested_symbolic(void);
extern void test_refs_read__head_then_master(void);
extern void test_refs_read__master_then_head(void);
extern void test_refs_read__packed(void);
extern void test_refs_read__loose_first(void);
extern void test_refs_read__chomped(void);
extern void test_refs_read__trailing(void);
extern void test_refs_read__unfound_return_ENOTFOUND(void);
extern void test_refs_read__can_determine_if_a_reference_is_a_local_branch(void);
extern void test_refs_read__can_determine_if_a_reference_is_a_tag(void);
extern void test_refs_read__can_determine_if_a_reference_is_a_note(void);
extern void test_refs_read__invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_read__initialize(void);
extern void test_refs_read__cleanup(void);
extern void test_refs_reflog_drop__dropping_a_non_exisiting_entry_from_the_log_returns_ENOTFOUND(void);
extern void test_refs_reflog_drop__can_drop_an_entry(void);
extern void test_refs_reflog_drop__can_drop_an_entry_and_rewrite_the_log_history(void);
extern void test_refs_reflog_drop__can_drop_the_oldest_entry(void);
extern void test_refs_reflog_drop__can_drop_the_oldest_entry_and_rewrite_the_log_history(void);
extern void test_refs_reflog_drop__can_drop_all_the_entries(void);
extern void test_refs_reflog_drop__can_persist_deletion_on_disk(void);
extern void test_refs_reflog_drop__initialize(void);
extern void test_refs_reflog_drop__cleanup(void);
extern void test_refs_reflog_messages__setting_head_updates_reflog(void);
extern void test_refs_reflog_messages__setting_head_to_same_target_ignores_reflog(void);
extern void test_refs_reflog_messages__detaching_writes_reflog(void);
extern void test_refs_reflog_messages__orphan_branch_does_not_count(void);
extern void test_refs_reflog_messages__branch_birth(void);
extern void test_refs_reflog_messages__commit_on_symbolic_ref_updates_head_reflog(void);
extern void test_refs_reflog_messages__show_merge_for_merge_commits(void);
extern void test_refs_reflog_messages__creating_a_direct_reference(void);
extern void test_refs_reflog_messages__newline_gets_replaced(void);
extern void test_refs_reflog_messages__renaming_ref(void);
extern void test_refs_reflog_messages__updating_a_direct_reference(void);
extern void test_refs_reflog_messages__creating_branches_default_messages(void);
extern void test_refs_reflog_messages__moving_branch_default_message(void);
extern void test_refs_reflog_messages__detaching_head_default_message(void);
extern void test_refs_reflog_messages__initialize(void);
extern void test_refs_reflog_messages__cleanup(void);
extern void test_refs_reflog_reflog__append_then_read(void);
extern void test_refs_reflog_reflog__renaming_the_reference_moves_the_reflog(void);
extern void test_refs_reflog_reflog__deleting_the_reference_deletes_the_reflog(void);
extern void test_refs_reflog_reflog__removes_empty_reflog_dir(void);
extern void test_refs_reflog_reflog__fails_gracefully_on_nonempty_reflog_dir(void);
extern void test_refs_reflog_reflog__reference_has_reflog(void);
extern void test_refs_reflog_reflog__reading_the_reflog_from_a_reference_with_no_log_returns_an_empty_one(void);
extern void test_refs_reflog_reflog__reading_a_reflog_with_invalid_format_succeeds(void);
extern void test_refs_reflog_reflog__cannot_write_a_moved_reflog(void);
extern void test_refs_reflog_reflog__renaming_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_reflog_reflog__write_only_std_locations(void);
extern void test_refs_reflog_reflog__write_when_explicitly_active(void);
extern void test_refs_reflog_reflog__append_to_HEAD_when_changing_current_branch(void);
extern void test_refs_reflog_reflog__do_not_append_when_no_update(void);
extern void test_refs_reflog_reflog__logallrefupdates_bare_set_false(void);
extern void test_refs_reflog_reflog__logallrefupdates_bare_set_always(void);
extern void test_refs_reflog_reflog__logallrefupdates_bare_unset(void);
extern void test_refs_reflog_reflog__logallrefupdates_nonbare_set_false(void);
extern void test_refs_reflog_reflog__initialize(void);
extern void test_refs_reflog_reflog__cleanup(void);
extern void test_refs_rename__loose(void);
extern void test_refs_rename__packed(void);
extern void test_refs_rename__packed_doesnt_pack_others(void);
extern void test_refs_rename__name_collision(void);
extern void test_refs_rename__invalid_name(void);
extern void test_refs_rename__force_loose_packed(void);
extern void test_refs_rename__force_loose(void);
extern void test_refs_rename__overwrite(void);
extern void test_refs_rename__prefix(void);
extern void test_refs_rename__move_up(void);
extern void test_refs_rename__propagate_eexists(void);
extern void test_refs_rename__initialize(void);
extern void test_refs_rename__cleanup(void);
extern void test_refs_revparse__nonexistant_object(void);
extern void test_refs_revparse__invalid_reference_name(void);
extern void test_refs_revparse__shas(void);
extern void test_refs_revparse__head(void);
extern void test_refs_revparse__full_refs(void);
extern void test_refs_revparse__partial_refs(void);
extern void test_refs_revparse__describe_output(void);
extern void test_refs_revparse__nth_parent(void);
extern void test_refs_revparse__not_tag(void);
extern void test_refs_revparse__to_type(void);
extern void test_refs_revparse__linear_history(void);
extern void test_refs_revparse__chaining(void);
extern void test_refs_revparse__upstream(void);
extern void test_refs_revparse__ordinal(void);
extern void test_refs_revparse__previous_head(void);
extern void test_refs_revparse__reflog_of_a_ref_under_refs(void);
extern void test_refs_revparse__revwalk(void);
extern void test_refs_revparse__date(void);
extern void test_refs_revparse__invalid_date(void);
extern void test_refs_revparse__colon(void);
extern void test_refs_revparse__disambiguation(void);
extern void test_refs_revparse__a_too_short_objectid_returns_EAMBIGUOUS(void);
extern void test_refs_revparse__a_not_precise_enough_objectid_returns_EAMBIGUOUS(void);
extern void test_refs_revparse__issue_994(void);
extern void test_refs_revparse__try_to_retrieve_branch_before_described_tag(void);
extern void test_refs_revparse__try_to_retrieve_sha_before_branch(void);
extern void test_refs_revparse__try_to_retrieve_branch_before_abbrev_sha(void);
extern void test_refs_revparse__at_at_end_of_refname(void);
extern void test_refs_revparse__range(void);
extern void test_refs_revparse__parses_range_operator(void);
extern void test_refs_revparse__ext_retrieves_both_the_reference_and_its_target(void);
extern void test_refs_revparse__ext_can_expand_short_reference_names(void);
extern void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_revision(void);
extern void test_refs_revparse__ext_returns_NULL_reference_when_expression_points_at_a_tree_content(void);
extern void test_refs_revparse__uneven_sizes(void);
extern void test_refs_revparse__parses_at_head(void);
extern void test_refs_revparse__initialize(void);
extern void test_refs_revparse__cleanup(void);
extern void test_refs_setter__update_direct(void);
extern void test_refs_setter__update_symbolic(void);
extern void test_refs_setter__cant_update_direct_with_symbolic(void);
extern void test_refs_setter__cant_update_symbolic_with_direct(void);
extern void test_refs_setter__initialize(void);
extern void test_refs_setter__cleanup(void);
extern void test_refs_shorthand__0(void);
extern void test_refs_tags_name__is_name_valid(void);
extern void test_refs_transactions__single_ref_oid(void);
extern void test_refs_transactions__single_ref_symbolic(void);
extern void test_refs_transactions__single_ref_mix_types(void);
extern void test_refs_transactions__single_ref_delete(void);
extern void test_refs_transactions__single_create(void);
extern void test_refs_transactions__unlocked_set(void);
extern void test_refs_transactions__error_on_locking_locked_ref(void);
extern void test_refs_transactions__commit_unlocks_unmodified_ref(void);
extern void test_refs_transactions__free_unlocks_unmodified_ref(void);
extern void test_refs_transactions__initialize(void);
extern void test_refs_transactions__cleanup(void);
extern void test_refs_unicode__create_and_lookup(void);
extern void test_refs_unicode__initialize(void);
extern void test_refs_unicode__cleanup(void);
extern void test_refs_update__updating_the_target_of_a_symref_with_an_invalid_name_returns_EINVALIDSPEC(void);
extern void test_refs_update__initialize(void);
extern void test_refs_update__cleanup(void);
extern void test_remote_create__manual(void);
extern void test_remote_create__named(void);
extern void test_remote_create__named_fail_on_invalid_name(void);
extern void test_remote_create__named_fail_on_invalid_url(void);
extern void test_remote_create__named_fail_on_conflicting_name(void);
extern void test_remote_create__with_fetchspec(void);
extern void test_remote_create__with_empty_fetchspec(void);
extern void test_remote_create__with_fetchspec_invalid_name(void);
extern void test_remote_create__with_fetchspec_invalid_url(void);
extern void test_remote_create__anonymous(void);
extern void test_remote_create__anonymous_invalid_url(void);
extern void test_remote_create__detached(void);
extern void test_remote_create__detached_invalid_url(void);
extern void test_remote_create__with_opts_named(void);
extern void test_remote_create__with_opts_named_and_fetchspec(void);
extern void test_remote_create__with_opts_named_no_fetchspec(void);
extern void test_remote_create__with_opts_anonymous(void);
extern void test_remote_create__with_opts_detached(void);
extern void test_remote_create__with_opts_insteadof_disabled(void);
extern void test_remote_create__with_opts_invalid_name(void);
extern void test_remote_create__with_opts_conflicting_name(void);
extern void test_remote_create__with_opts_invalid_url(void);
extern void test_remote_create__initialize(void);
extern void test_remote_create__cleanup(void);
extern void test_remote_fetch__dont_update_refs_if_not_descendant_and_not_force(void);
extern void test_remote_fetch__do_update_refs_if_not_descendant_and_force(void);
extern void test_remote_fetch__initialize(void);
extern void test_remote_fetch__cleanup(void);
extern void test_remote_httpproxy__config_overrides(void);
extern void test_remote_httpproxy__config_empty_overrides(void);
extern void test_remote_httpproxy__config_overrides_detached_remote(void);
extern void test_remote_httpproxy__env(void);
extern void test_remote_httpproxy__initialize(void);
extern void test_remote_httpproxy__cleanup(void);
extern void test_remote_insteadof__not_applicable(void);
extern void test_remote_insteadof__url_insteadof_fetch(void);
extern void test_remote_insteadof__url_insteadof_push(void);
extern void test_remote_insteadof__url_insteadof_both(void);
extern void test_remote_insteadof__pushurl_insteadof_fetch(void);
extern void test_remote_insteadof__pushurl_insteadof_push(void);
extern void test_remote_insteadof__pushurl_insteadof_both(void);
extern void test_remote_insteadof__anonymous_remote_fetch(void);
extern void test_remote_insteadof__anonymous_remote_push(void);
extern void test_remote_insteadof__anonymous_remote_both(void);
extern void test_remote_insteadof__initialize(void);
extern void test_remote_insteadof__cleanup(void);
extern void test_remote_list__always_checks_disk_config(void);
extern void test_remote_list__initialize(void);
extern void test_remote_list__cleanup(void);
extern void test_repo_config__can_open_global_when_there_is_no_file(void);
extern void test_repo_config__can_open_missing_global_with_separators(void);
extern void test_repo_config__read_with_no_configs_at_all(void);
extern void test_repo_config__initialize(void);
extern void test_repo_config__cleanup(void);
extern void test_repo_discover__discovering_repo_with_exact_path_succeeds(void);
extern void test_repo_discover__discovering_nonexistent_dir_fails(void);
extern void test_repo_discover__discovering_repo_with_subdirectory_succeeds(void);
extern void test_repo_discover__discovering_repository_with_alternative_gitdir_succeeds(void);
extern void test_repo_discover__discovering_repository_with_malformed_alternative_gitdir_fails(void);
extern void test_repo_discover__discovering_repository_with_ceiling(void);
extern void test_repo_discover__other_ceiling(void);
extern void test_repo_discover__ceiling_should_not_affect_gitdir_redirection(void);
extern void test_repo_discover__discovery_starting_at_file_succeeds(void);
extern void test_repo_discover__discovery_starting_at_system_root_causes_no_hang(void);
extern void test_repo_discover__initialize(void);
extern void test_repo_discover__cleanup(void);
extern void test_repo_env__open(void);
extern void test_repo_env__work_tree(void);
extern void test_repo_env__commondir(void);
extern void test_repo_env__config(void);
extern void test_repo_env__initialize(void);
extern void test_repo_env__cleanup(void);
extern void test_repo_extensions__builtin(void);
extern void test_repo_extensions__negate_builtin(void);
extern void test_repo_extensions__unsupported(void);
extern void test_repo_extensions__adds_extension(void);
extern void test_repo_extensions__initialize(void);
extern void test_repo_extensions__cleanup(void);
extern void test_repo_getters__is_empty_correctly_deals_with_pristine_looking_repos(void);
extern void test_repo_getters__is_empty_can_detect_used_repositories(void);
extern void test_repo_getters__is_empty_can_detect_repositories_with_defaultbranch_config_empty(void);
extern void test_repo_getters__retrieving_the_odb_honors_the_refcount(void);
extern void test_repo_getters__commit_parents(void);
extern void test_repo_hashfile__simple(void);
extern void test_repo_hashfile__filtered_in_workdir(void);
extern void test_repo_hashfile__filtered_outside_workdir(void);
extern void test_repo_hashfile__initialize(void);
extern void test_repo_hashfile__cleanup(void);
extern void test_repo_head__unborn_head(void);
extern void test_repo_head__set_head_Attaches_HEAD_to_un_unborn_branch_when_the_branch_doesnt_exist(void);
extern void test_repo_head__set_head_Returns_ENOTFOUND_when_the_reference_doesnt_exist(void);
extern void test_repo_head__set_head_Fails_when_the_reference_points_to_a_non_commitish(void);
extern void test_repo_head__set_head_Attaches_HEAD_when_the_reference_points_to_a_branch(void);
extern void test_repo_head__set_head_Detaches_HEAD_when_the_reference_doesnt_point_to_a_branch(void);
extern void test_repo_head__set_head_detached_Return_ENOTFOUND_when_the_object_doesnt_exist(void);
extern void test_repo_head__set_head_detached_Fails_when_the_object_isnt_a_commitish(void);
extern void test_repo_head__set_head_detached_Detaches_HEAD_and_make_it_point_to_the_peeled_commit(void);
extern void test_repo_head__detach_head_Detaches_HEAD_and_make_it_point_to_the_peeled_commit(void);
extern void test_repo_head__detach_head_Fails_if_HEAD_and_point_to_a_non_commitish(void);
extern void test_repo_head__detaching_an_unborn_branch_returns_GIT_EUNBORNBRANCH(void);
extern void test_repo_head__retrieving_an_unborn_branch_returns_GIT_EUNBORNBRANCH(void);
extern void test_repo_head__retrieving_a_missing_head_returns_GIT_ENOTFOUND(void);
extern void test_repo_head__can_tell_if_an_unborn_head_is_detached(void);
extern void test_repo_head__initialize(void);
extern void test_repo_head__cleanup(void);
extern void test_repo_headtree__can_retrieve_the_root_tree_from_a_detached_head(void);
extern void test_repo_headtree__can_retrieve_the_root_tree_from_a_non_detached_head(void);
extern void test_repo_headtree__when_head_is_unborn_returns_EUNBORNBRANCH(void);
extern void test_repo_headtree__when_head_is_missing_returns_ENOTFOUND(void);
extern void test_repo_headtree__initialize(void);
extern void test_repo_headtree__cleanup(void);
extern void test_repo_init__standard_repo(void);
extern void test_repo_init__standard_repo_noslash(void);
extern void test_repo_init__bare_repo(void);
extern void test_repo_init__bare_repo_noslash(void);
extern void test_repo_init__bare_repo_escaping_current_workdir(void);
extern void test_repo_init__reinit_bare_repo(void);
extern void test_repo_init__reinit_nondefault_version(void);
extern void test_repo_init__reinit_unsupported_version(void);
extern void test_repo_init__additional_templates(void);
extern void test_repo_init__detect_filemode(void);
extern void test_repo_init__detect_ignorecase(void);
extern void test_repo_init__symlinks_win32_enabled_by_global_config(void);
extern void test_repo_init__symlinks_win32_off_by_default(void);
extern void test_repo_init__symlinks_posix_detected(void);
extern void test_repo_init__detect_precompose_unicode_required(void);
extern void test_repo_init__reinit_doesnot_overwrite_ignorecase(void);
extern void test_repo_init__reinit_overwrites_filemode(void);
extern void test_repo_init__sets_logAllRefUpdates_according_to_type_of_repository(void);
extern void test_repo_init__extended_0(void);
extern void test_repo_init__extended_1(void);
extern void test_repo_init__relative_gitdir(void);
extern void test_repo_init__relative_gitdir_2(void);
extern void test_repo_init__can_reinit_an_initialized_repository(void);
extern void test_repo_init__init_with_initial_commit(void);
extern void test_repo_init__at_filesystem_root(void);
extern void test_repo_init__nonexisting_directory(void);
extern void test_repo_init__nonexisting_root(void);
extern void test_repo_init__unwriteable_directory(void);
extern void test_repo_init__defaultbranch_config(void);
extern void test_repo_init__defaultbranch_config_empty(void);
extern void test_repo_init__longpath(void);
extern void test_repo_init__absolute_path_with_backslashes(void);
extern void test_repo_init__initialize(void);
extern void test_repo_init__cleanup(void);
extern void test_repo_message__none(void);
extern void test_repo_message__message(void);
extern void test_repo_message__initialize(void);
extern void test_repo_message__cleanup(void);
extern void test_repo_new__has_nothing(void);
extern void test_repo_new__is_bare_until_workdir_set(void);
extern void test_repo_new__sha1(void);
extern void test_repo_new__sha256(void);
extern void test_repo_objectformat__unspecified(void);
extern void test_repo_objectformat__sha1(void);
extern void test_repo_objectformat__sha256(void);
extern void test_repo_objectformat__invalid(void);
extern void test_repo_objectformat__initialize(void);
extern void test_repo_objectformat__cleanup(void);
extern void test_repo_open__bare_empty_repo(void);
extern void test_repo_open__format_version_1(void);
extern void test_repo_open__standard_empty_repo_through_gitdir(void);
extern void test_repo_open__standard_empty_repo_through_workdir(void);
extern void test_repo_open__open_with_discover(void);
extern void test_repo_open__check_if_repository(void);
extern void test_repo_open__gitlinked(void);
extern void test_repo_open__with_symlinked_config(void);
extern void test_repo_open__from_git_new_workdir(void);
extern void test_repo_open__failures(void);
extern void test_repo_open__bad_gitlinks(void);
extern void test_repo_open__win32_path(void);
extern void test_repo_open__opening_a_non_existing_repository_returns_ENOTFOUND(void);
extern void test_repo_open__no_config(void);
extern void test_repo_open__force_bare(void);
extern void test_repo_open__validates_dir_ownership(void);
extern void test_repo_open__validates_bare_repo_ownership(void);
extern void test_repo_open__can_allowlist_dirs_with_problematic_ownership(void);
extern void test_repo_open__safe_directory_fails_with_trailing_slash(void);
extern void test_repo_open__can_wildcard_allowlist_with_problematic_ownership(void);
extern void test_repo_open__can_allowlist_bare_gitdir(void);
extern void test_repo_open__can_wildcard_allowlist_bare_gitdir(void);
extern void test_repo_open__can_handle_prefixed_safe_paths(void);
extern void test_repo_open__prefixed_safe_paths_must_have_two_slashes(void);
extern void test_repo_open__can_handle_win32_prefixed_safe_paths(void);
extern void test_repo_open__can_handle_win32_unc_safe_paths(void);
extern void test_repo_open__can_reset_safe_directory_list(void);
extern void test_repo_open__initialize(void);
extern void test_repo_open__cleanup(void);
extern void test_repo_pathspec__workdir0(void);
extern void test_repo_pathspec__workdir1(void);
extern void test_repo_pathspec__workdir2(void);
extern void test_repo_pathspec__workdir3(void);
extern void test_repo_pathspec__workdir4(void);
extern void test_repo_pathspec__index0(void);
extern void test_repo_pathspec__index1(void);
extern void test_repo_pathspec__tree0(void);
extern void test_repo_pathspec__tree5(void);
extern void test_repo_pathspec__in_memory(void);
extern void test_repo_pathspec__initialize(void);
extern void test_repo_pathspec__cleanup(void);
extern void test_repo_reservedname__includes_shortname_on_win32(void);
extern void test_repo_reservedname__includes_shortname_when_requested(void);
extern void test_repo_reservedname__custom_shortname_recognized(void);
extern void test_repo_reservedname__submodule_pointer(void);
extern void test_repo_reservedname__submodule_pointer_during_create(void);
extern void test_repo_reservedname__cleanup(void);
extern void test_repo_setters__setting_a_workdir_turns_a_bare_repository_into_a_standard_one(void);
extern void test_repo_setters__setting_a_workdir_prettifies_its_path(void);
extern void test_repo_setters__setting_a_workdir_creates_a_gitlink(void);
extern void test_repo_setters__setting_a_new_index_on_a_repo_which_has_already_loaded_one_properly_honors_the_refcount(void);
extern void test_repo_setters__setting_a_new_odb_on_a_repo_which_already_loaded_one_properly_honors_the_refcount(void);
extern void test_repo_setters__initialize(void);
extern void test_repo_setters__cleanup(void);
extern void test_repo_shallow__no_shallow_file(void);
extern void test_repo_shallow__empty_shallow_file(void);
extern void test_repo_shallow__shallow_repo(void);
extern void test_repo_shallow__clears_errors(void);
extern void test_repo_shallow__initialize(void);
extern void test_repo_shallow__cleanup(void);
extern void test_repo_state__none_with_HEAD_attached(void);
extern void test_repo_state__none_with_HEAD_detached(void);
extern void test_repo_state__merge(void);
extern void test_repo_state__revert(void);
extern void test_repo_state__revert_sequence(void);
extern void test_repo_state__cherry_pick(void);
extern void test_repo_state__cherrypick_sequence(void);
extern void test_repo_state__bisect(void);
extern void test_repo_state__rebase_interactive(void);
extern void test_repo_state__rebase_merge(void);
extern void test_repo_state__rebase(void);
extern void test_repo_state__apply_mailbox(void);
extern void test_repo_state__apply_mailbox_or_rebase(void);
extern void test_repo_state__initialize(void);
extern void test_repo_state__cleanup(void);
extern void test_repo_template__external_templates_specified_in_options(void);
extern void test_repo_template__external_templates_specified_in_config(void);
extern void test_repo_template__external_templates_with_leading_dot(void);
extern void test_repo_template__extended_with_template_and_shared_mode(void);
extern void test_repo_template__templated_head_is_used(void);
extern void test_repo_template__initial_head_option_overrides_template_head(void);
extern void test_repo_template__empty_template_path(void);
extern void test_repo_template__nonexistent_template_path(void);
extern void test_repo_template__initialize(void);
extern void test_repo_template__cleanup(void);
extern void test_reset_default__resetting_filepaths_against_a_null_target_removes_them_from_the_index(void);
extern void test_reset_default__resetting_filepaths_replaces_their_corresponding_index_entries(void);
extern void test_reset_default__resetting_filepaths_clears_previous_conflicts(void);
extern void test_reset_default__resetting_unknown_filepaths_does_not_fail(void);
extern void test_reset_default__staged_rename_reset_delete(void);
extern void test_reset_default__initialize(void);
extern void test_reset_default__cleanup(void);
extern void test_reset_hard__resetting_reverts_modified_files(void);
extern void test_reset_hard__cannot_reset_in_a_bare_repository(void);
extern void test_reset_hard__resetting_reverts_unmerged(void);
extern void test_reset_hard__cleans_up_merge(void);
extern void test_reset_hard__reflog_is_correct(void);
extern void test_reset_hard__switch_file_to_dir(void);
extern void test_reset_hard__initialize(void);
extern void test_reset_hard__cleanup(void);
extern void test_reset_mixed__cannot_reset_in_a_bare_repository(void);
extern void test_reset_mixed__resetting_refreshes_the_index_to_the_commit_tree(void);
extern void test_reset_mixed__reflog_is_correct(void);
extern void test_reset_mixed__initialize(void);
extern void test_reset_mixed__cleanup(void);
extern void test_reset_soft__can_reset_the_non_detached_Head_to_the_specified_commit(void);
extern void test_reset_soft__can_reset_the_detached_Head_to_the_specified_commit(void);
extern void test_reset_soft__resetting_to_the_commit_pointed_at_by_the_Head_does_not_change_the_target_of_the_Head(void);
extern void test_reset_soft__resetting_to_a_tag_sets_the_Head_to_the_peeled_commit(void);
extern void test_reset_soft__cannot_reset_to_a_tag_not_pointing_at_a_commit(void);
extern void test_reset_soft__resetting_against_an_unborn_head_repo_makes_the_head_no_longer_unborn(void);
extern void test_reset_soft__fails_when_merging(void);
extern void test_reset_soft__fails_when_index_contains_conflicts_independently_of_MERGE_HEAD_file_existence(void);
extern void test_reset_soft__reflog_is_correct(void);
extern void test_reset_soft__initialize(void);
extern void test_reset_soft__cleanup(void);
extern void test_revert_bare__automerge(void);
extern void test_revert_bare__conflicts(void);
extern void test_revert_bare__orphan(void);
extern void test_revert_bare__initialize(void);
extern void test_revert_bare__cleanup(void);
extern void test_revert_rename__automerge(void);
extern void test_revert_rename__initialize(void);
extern void test_revert_rename__cleanup(void);
extern void test_revert_workdir__automerge(void);
extern void test_revert_workdir__conflicts(void);
extern void test_revert_workdir__orphan(void);
extern void test_revert_workdir__again(void);
extern void test_revert_workdir__again_after_automerge(void);
extern void test_revert_workdir__again_after_edit(void);
extern void test_revert_workdir__again_after_edit_two(void);
extern void test_revert_workdir__conflict_use_ours(void);
extern void test_revert_workdir__rename_1_of_2(void);
extern void test_revert_workdir__rename(void);
extern void test_revert_workdir__head(void);
extern void test_revert_workdir__nonmerge_fails_mainline_specified(void);
extern void test_revert_workdir__merge_fails_without_mainline_specified(void);
extern void test_revert_workdir__merge_first_parent(void);
extern void test_revert_workdir__merge_second_parent(void);
extern void test_revert_workdir__initialize(void);
extern void test_revert_workdir__cleanup(void);
extern void test_revwalk_basic__sorting_modes(void);
extern void test_revwalk_basic__glob_heads(void);
extern void test_revwalk_basic__glob_heads_with_invalid(void);
extern void test_revwalk_basic__glob_invalid_symbolic_ref(void);
extern void test_revwalk_basic__push_head(void);
extern void test_revwalk_basic__sorted_after_reset(void);
extern void test_revwalk_basic__push_head_hide_ref(void);
extern void test_revwalk_basic__push_head_hide_ref_nobase(void);
extern void test_revwalk_basic__multiple_push_1(void);
extern void test_revwalk_basic__multiple_push_2(void);
extern void test_revwalk_basic__disallow_non_commit(void);
extern void test_revwalk_basic__hide_then_push(void);
extern void test_revwalk_basic__topo_crash(void);
extern void test_revwalk_basic__from_new_to_old(void);
extern void test_revwalk_basic__push_range(void);
extern void test_revwalk_basic__push_range_merge_base(void);
extern void test_revwalk_basic__push_range_no_range(void);
extern void test_revwalk_basic__push_mixed(void);
extern void test_revwalk_basic__push_all(void);
extern void test_revwalk_basic__mimic_git_rev_list(void);
extern void test_revwalk_basic__big_timestamp(void);
extern void test_revwalk_basic__old_hidden_commit_one(void);
extern void test_revwalk_basic__old_hidden_commit_two(void);
extern void test_revwalk_basic__newer_hidden_commit_hides_old_commits(void);
extern void test_revwalk_basic__initialize(void);
extern void test_revwalk_basic__cleanup(void);
extern void test_revwalk_hidecb__hide_all_cb(void);
extern void test_revwalk_hidecb__hide_none_cb(void);
extern void test_revwalk_hidecb__unset_cb_before_walk(void);
extern void test_revwalk_hidecb__change_cb_before_walk(void);
extern void test_revwalk_hidecb__add_hide_cb_during_walking(void);
extern void test_revwalk_hidecb__hide_some_commits(void);
extern void test_revwalk_hidecb__test_payload(void);
extern void test_revwalk_hidecb__initialize(void);
extern void test_revwalk_hidecb__cleanup(void);
extern void test_revwalk_mergebase__single1(void);
extern void test_revwalk_mergebase__single2(void);
extern void test_revwalk_mergebase__merged_branch(void);
extern void test_revwalk_mergebase__two_way_merge(void);
extern void test_revwalk_mergebase__no_common_ancestor_returns_ENOTFOUND(void);
extern void test_revwalk_mergebase__prefer_youngest_merge_base(void);
extern void test_revwalk_mergebase__multiple_merge_bases(void);
extern void test_revwalk_mergebase__multiple_merge_bases_many_commits(void);
extern void test_revwalk_mergebase__no_off_by_one_missing(void);
extern void test_revwalk_mergebase__many_no_common_ancestor_returns_ENOTFOUND(void);
extern void test_revwalk_mergebase__many_merge_branch(void);
extern void test_revwalk_mergebase__octopus_no_common_ancestor_returns_ENOTFOUND(void);
extern void test_revwalk_mergebase__octopus_merge_branch(void);
extern void test_revwalk_mergebase__remove_redundant(void);
extern void test_revwalk_mergebase__initialize(void);
extern void test_revwalk_mergebase__cleanup(void);
extern void test_revwalk_signatureparsing__do_not_choke_when_name_contains_angle_brackets(void);
extern void test_revwalk_signatureparsing__initialize(void);
extern void test_revwalk_signatureparsing__cleanup(void);
extern void test_revwalk_simplify__first_parent(void);
extern void test_revwalk_simplify__cleanup(void);
extern void test_stash_apply__with_default(void);
extern void test_stash_apply__with_existing_file(void);
extern void test_stash_apply__merges_new_file(void);
extern void test_stash_apply__with_reinstate_index(void);
extern void test_stash_apply__conflict_index_with_default(void);
extern void test_stash_apply__conflict_index_with_reinstate_index(void);
extern void test_stash_apply__conflict_untracked_with_default(void);
extern void test_stash_apply__conflict_untracked_with_reinstate_index(void);
extern void test_stash_apply__conflict_workdir_with_default(void);
extern void test_stash_apply__conflict_workdir_with_reinstate_index(void);
extern void test_stash_apply__conflict_commit_with_default(void);
extern void test_stash_apply__conflict_commit_with_reinstate_index(void);
extern void test_stash_apply__fails_with_uncommitted_changes_in_index(void);
extern void test_stash_apply__pop(void);
extern void test_stash_apply__executes_notify_cb(void);
extern void test_stash_apply__calls_progress_cb(void);
extern void test_stash_apply__progress_cb_can_abort(void);
extern void test_stash_apply__uses_reflog_like_indices_1(void);
extern void test_stash_apply__uses_reflog_like_indices_2(void);
extern void test_stash_apply__initialize(void);
extern void test_stash_apply__cleanup(void);
extern void test_stash_drop__cannot_drop_from_an_empty_stash(void);
extern void test_stash_drop__cannot_drop_a_non_existing_stashed_state(void);
extern void test_stash_drop__can_purge_the_stash_from_the_top(void);
extern void test_stash_drop__can_purge_the_stash_from_the_bottom(void);
extern void test_stash_drop__dropping_an_entry_rewrites_reflog_history(void);
extern void test_stash_drop__dropping_the_last_entry_removes_the_stash(void);
extern void test_stash_drop__dropping_the_top_stash_updates_the_stash_reference(void);
extern void test_stash_drop__initialize(void);
extern void test_stash_drop__cleanup(void);
extern void test_stash_foreach__enumerating_a_empty_repository_doesnt_fail(void);
extern void test_stash_foreach__can_enumerate_a_repository(void);
extern void test_stash_foreach__initialize(void);
extern void test_stash_foreach__cleanup(void);
extern void test_stash_save__does_not_keep_index_by_default(void);
extern void test_stash_save__can_keep_index(void);
extern void test_stash_save__can_keep_all(void);
extern void test_stash_save__can_include_untracked_files(void);
extern void test_stash_save__untracked_skips_ignored(void);
extern void test_stash_save__can_include_untracked_and_ignored_files(void);
extern void test_stash_save__untracked_regression(void);
extern void test_stash_save__can_accept_a_message(void);
extern void test_stash_save__cannot_stash_against_an_unborn_branch(void);
extern void test_stash_save__cannot_stash_against_a_bare_repository(void);
extern void test_stash_save__can_stash_against_a_detached_head(void);
extern void test_stash_save__stashing_updates_the_reflog(void);
extern void test_stash_save__multiline_message(void);
extern void test_stash_save__cannot_stash_when_there_are_no_local_change(void);
extern void test_stash_save__can_stage_normal_then_stage_untracked(void);
extern void test_stash_save__including_untracked_without_any_untracked_file_creates_an_empty_tree(void);
extern void test_stash_save__ignored_directory(void);
extern void test_stash_save__skip_submodules(void);
extern void test_stash_save__deleted_in_index_modified_in_workdir(void);
extern void test_stash_save__option_paths(void);
extern void test_stash_save__initialize(void);
extern void test_stash_save__cleanup(void);
extern void test_stash_submodules__does_not_stash_modified_submodules(void);
extern void test_stash_submodules__stash_is_empty_with_modified_submodules(void);
extern void test_stash_submodules__initialize(void);
extern void test_stash_submodules__cleanup(void);
extern void test_status_renames__head2index_one(void);
extern void test_status_renames__head2index_two(void);
extern void test_status_renames__head2index_no_rename_from_rewrite(void);
extern void test_status_renames__head2index_rename_from_rewrite(void);
extern void test_status_renames__index2workdir_one(void);
extern void test_status_renames__index2workdir_two(void);
extern void test_status_renames__index2workdir_rename_from_rewrite(void);
extern void test_status_renames__both_one(void);
extern void test_status_renames__both_two(void);
extern void test_status_renames__both_rename_from_rewrite(void);
extern void test_status_renames__rewrites_only_for_renames(void);
extern void test_status_renames__both_casechange_one(void);
extern void test_status_renames__both_casechange_two(void);
extern void test_status_renames__zero_byte_file_does_not_fail(void);
extern void test_status_renames__precomposed_unicode_rename(void);
extern void test_status_renames__precomposed_unicode_toggle_is_rename(void);
extern void test_status_renames__rename_threshold(void);
extern void test_status_renames__case_insensitive_h2i_and_i2wc(void);
extern void test_status_renames__initialize(void);
extern void test_status_renames__cleanup(void);
extern void test_status_single__hash_single_file(void);
extern void test_status_single__hash_single_empty_file(void);
extern void test_status_submodules__api(void);
extern void test_status_submodules__0(void);
extern void test_status_submodules__1(void);
extern void test_status_submodules__single_file(void);
extern void test_status_submodules__moved_head(void);
extern void test_status_submodules__dirty_workdir_only(void);
extern void test_status_submodules__uninitialized(void);
extern void test_status_submodules__contained_untracked_repo(void);
extern void test_status_submodules__broken_stuff_that_git_allows(void);
extern void test_status_submodules__entry_but_dir_tracked(void);
extern void test_status_submodules__mixed_case(void);
extern void test_status_submodules__initialize(void);
extern void test_status_submodules__cleanup(void);
extern void test_status_worktree__whole_repository(void);
extern void test_status_worktree__show_index_and_workdir(void);
extern void test_status_worktree__show_index_only(void);
extern void test_status_worktree__show_workdir_only(void);
extern void test_status_worktree__empty_repository(void);
extern void test_status_worktree__purged_worktree(void);
extern void test_status_worktree__swap_subdir_and_file(void);
extern void test_status_worktree__swap_subdir_with_recurse_and_pathspec(void);
extern void test_status_worktree__within_subdir(void);
extern void test_status_worktree__single_file(void);
extern void test_status_worktree__single_nonexistent_file(void);
extern void test_status_worktree__single_nonexistent_file_empty_repo(void);
extern void test_status_worktree__single_file_empty_repo(void);
extern void test_status_worktree__single_folder(void);
extern void test_status_worktree__ignores(void);
extern void test_status_worktree__issue_592(void);
extern void test_status_worktree__issue_592_2(void);
extern void test_status_worktree__issue_592_3(void);
extern void test_status_worktree__issue_592_4(void);
extern void test_status_worktree__issue_592_5(void);
extern void test_status_worktree__issue_592_ignores_0(void);
extern void test_status_worktree__issue_592_ignored_dirs_with_tracked_content(void);
extern void test_status_worktree__conflict_with_diff3(void);
extern void test_status_worktree__filemode_changes(void);
extern void test_status_worktree__filemode_non755(void);
extern void test_status_worktree__interruptable_foreach(void);
extern void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf(void);
extern void test_status_worktree__line_endings_dont_count_as_changes_with_autocrlf_issue_1397(void);
extern void test_status_worktree__conflicted_item(void);
extern void test_status_worktree__conflict_has_no_oid(void);
extern void test_status_worktree__file_status_honors_core_ignorecase_true(void);
extern void test_status_worktree__file_status_honors_core_ignorecase_false(void);
extern void test_status_worktree__file_status_honors_case_ignorecase_regarding_untracked_files(void);
extern void test_status_worktree__simple_delete(void);
extern void test_status_worktree__simple_delete_indexed(void);
extern void test_status_worktree__sorting_by_case(void);
extern void test_status_worktree__long_filenames(void);
extern void test_status_worktree__update_stat_cache_0(void);
extern void test_status_worktree__unreadable(void);
extern void test_status_worktree__unreadable_not_included(void);
extern void test_status_worktree__unreadable_as_untracked(void);
extern void test_status_worktree__update_index_with_symlink_doesnt_change_mode(void);
extern void test_status_worktree__with_directory_in_pathlist(void);
extern void test_status_worktree__at_head_parent(void);
extern void test_status_worktree__skip_hash(void);
extern void test_status_worktree__cleanup(void);
extern void test_status_worktree_init__cannot_retrieve_the_status_of_a_bare_repository(void);
extern void test_status_worktree_init__first_commit_in_progress(void);
extern void test_status_worktree_init__status_file_without_index_or_workdir(void);
extern void test_status_worktree_init__status_file_with_clean_index_and_empty_workdir(void);
extern void test_status_worktree_init__bracket_in_filename(void);
extern void test_status_worktree_init__space_in_filename(void);
extern void test_status_worktree_init__disable_pathspec_match(void);
extern void test_status_worktree_init__new_staged_file_must_handle_crlf(void);
extern void test_stream_deprecated__register_tls(void);
extern void test_stream_deprecated__cleanup(void);
extern void test_stream_registration__insecure(void);
extern void test_stream_registration__tls(void);
extern void test_stream_registration__both(void);
extern void test_stream_registration__cleanup(void);
extern void test_stress_diff__rename_big_files(void);
extern void test_stress_diff__rename_many_files(void);
extern void test_stress_diff__initialize(void);
extern void test_stress_diff__cleanup(void);
extern void test_submodule_add__url_absolute(void);
extern void test_submodule_add__url_relative(void);
extern void test_submodule_add__url_relative_to_origin(void);
extern void test_submodule_add__url_relative_to_workdir(void);
extern void test_submodule_add__path_exists_in_index(void);
extern void test_submodule_add__file_exists_in_index(void);
extern void test_submodule_add__submodule_clone(void);
extern void test_submodule_add__submodule_clone_into_nonempty_dir_succeeds(void);
extern void test_submodule_add__submodule_clone_twice_fails(void);
extern void test_submodule_add__cleanup(void);
extern void test_submodule_escape__from_gitdir(void);
extern void test_submodule_escape__from_gitdir_windows(void);
extern void test_submodule_escape__cleanup(void);
extern void test_submodule_init__absolute_url(void);
extern void test_submodule_init__relative_url(void);
extern void test_submodule_init__relative_url_detached_head(void);
extern void test_submodule_init__cleanup(void);
extern void test_submodule_inject_option__url(void);
extern void test_submodule_inject_option__path(void);
extern void test_submodule_inject_option__initialize(void);
extern void test_submodule_inject_option__cleanup(void);
extern void test_submodule_lookup__simple_lookup(void);
extern void test_submodule_lookup__can_be_dupped(void);
extern void test_submodule_lookup__accessors(void);
extern void test_submodule_lookup__foreach(void);
extern void test_submodule_lookup__duplicated_path(void);
extern void test_submodule_lookup__lookup_even_with_unborn_head(void);
extern void test_submodule_lookup__lookup_even_with_missing_index(void);
extern void test_submodule_lookup__backslashes(void);
extern void test_submodule_lookup__just_added(void);
extern void test_submodule_lookup__prefix_name(void);
extern void test_submodule_lookup__dotpath_in_name(void);
extern void test_submodule_lookup__renamed(void);
extern void test_submodule_lookup__cached(void);
extern void test_submodule_lookup__lookup_in_bare_repository_fails(void);
extern void test_submodule_lookup__foreach_in_bare_repository_fails(void);
extern void test_submodule_lookup__fail_invalid_gitmodules(void);
extern void test_submodule_lookup__initialize(void);
extern void test_submodule_lookup__cleanup(void);
extern void test_submodule_modify__init(void);
extern void test_submodule_modify__sync(void);
extern void test_submodule_modify__set_ignore(void);
extern void test_submodule_modify__set_update(void);
extern void test_submodule_modify__set_fetch_recurse_submodules(void);
extern void test_submodule_modify__set_branch(void);
extern void test_submodule_modify__set_url(void);
extern void test_submodule_modify__set_relative_url(void);
extern void test_submodule_modify__initialize(void);
extern void test_submodule_nosubs__lookup(void);
extern void test_submodule_nosubs__foreach(void);
extern void test_submodule_nosubs__add(void);
extern void test_submodule_nosubs__bad_gitmodules(void);
extern void test_submodule_nosubs__add_and_delete(void);
extern void test_submodule_nosubs__cleanup(void);
extern void test_submodule_open__opening_via_lookup_succeeds(void);
extern void test_submodule_open__direct_open_succeeds(void);
extern void test_submodule_open__direct_open_succeeds_for_broken_sm_with_gitdir(void);
extern void test_submodule_open__initialize(void);
extern void test_submodule_open__cleanup(void);
extern void test_submodule_repository_init__basic(void);
extern void test_submodule_status__unchanged(void);
extern void test_submodule_status__ignore_none(void);
extern void test_submodule_status__ignore_untracked(void);
extern void test_submodule_status__ignore_dirty(void);
extern void test_submodule_status__ignore_all(void);
extern void test_submodule_status__iterator(void);
extern void test_submodule_status__untracked_dirs_containing_ignored_files(void);
extern void test_submodule_status__initialize(void);
extern void test_submodule_status__cleanup(void);
extern void test_submodule_update__uninitialized_submodule_no_init(void);
extern void test_submodule_update__update_submodule(void);
extern void test_submodule_update__update_submodule_with_path(void);
extern void test_submodule_update__update_and_init_submodule(void);
extern void test_submodule_update__update_skip_configured_missing_submodule(void);
extern void test_submodule_update__update_already_checked_out_submodule(void);
extern void test_submodule_update__update_blocks_on_dirty_wd(void);
extern void test_submodule_update__can_force_update(void);
extern void test_submodule_update__cleanup(void);
extern void test_threads_atomic__atomic32_set(void);
extern void test_threads_atomic__atomic32_get(void);
extern void test_threads_atomic__atomic32_inc(void);
extern void test_threads_atomic__atomic32_add(void);
extern void test_threads_atomic__atomic32_dec(void);
extern void test_threads_atomic__atomic64_set(void);
extern void test_threads_atomic__atomic64_get(void);
extern void test_threads_atomic__atomic64_add(void);
extern void test_threads_atomic__cas_pointer(void);
extern void test_threads_atomic__cas_intptr(void);
extern void test_threads_atomic__swap(void);
extern void test_threads_atomic__load_ptr(void);
extern void test_threads_atomic__load_intptr(void);
extern void test_threads_basic__cache(void);
extern void test_threads_basic__multiple_init(void);
extern void test_threads_basic__set_error(void);
extern void test_threads_basic__exit(void);
extern void test_threads_basic__initialize(void);
extern void test_threads_basic__cleanup(void);
extern void test_threads_diff__concurrent_diffs(void);
extern void test_threads_diff__with_concurrent_index_modified(void);
extern void test_threads_diff__initialize(void);
extern void test_threads_diff__cleanup(void);
extern void test_threads_iterator__workdir(void);
extern void test_threads_iterator__cleanup(void);
extern void test_threads_refdb__edit_while_iterate(void);
extern void test_threads_refdb__initialize(void);
extern void test_threads_refdb__cleanup(void);
extern void test_threads_tlsdata__can_set_and_get(void);
extern void test_threads_tlsdata__threads(void);
extern void test_trace_trace__sets(void);
extern void test_trace_trace__can_reset(void);
extern void test_trace_trace__can_unset(void);
extern void test_trace_trace__skips_higher_level(void);
extern void test_trace_trace__writes(void);
extern void test_trace_trace__writes_lower_level(void);
extern void test_trace_trace__initialize(void);
extern void test_trace_trace__cleanup(void);
extern void test_trace_windows_stacktrace__basic(void);
extern void test_trace_windows_stacktrace__leaks(void);
extern void test_trace_windows_stacktrace__aux1(void);
extern void test_transport_register__custom_transport(void);
extern void test_transport_register__custom_transport_error_doubleregister(void);
extern void test_transport_register__custom_transport_error_remove_non_existing(void);
extern void test_transport_register__custom_transport_ssh(void);
extern void test_transport_register__custom_transport_callbacks(void);
extern void test_transport_ssh_exec__reject_injection_username(void);
extern void test_transport_ssh_exec__reject_injection_hostname(void);
extern void test_transport_ssh_exec__reject_injection_path(void);
extern void test_transports_smart_packet__parsing_garbage_fails(void);
extern void test_transports_smart_packet__flush_parses(void);
extern void test_transports_smart_packet__data_pkt(void);
extern void test_transports_smart_packet__sideband_progress_pkt(void);
extern void test_transports_smart_packet__sideband_err_pkt(void);
extern void test_transports_smart_packet__ack_pkt(void);
extern void test_transports_smart_packet__nak_pkt(void);
extern void test_transports_smart_packet__error_pkt(void);
extern void test_transports_smart_packet__comment_pkt(void);
extern void test_transports_smart_packet__ok_pkt(void);
extern void test_transports_smart_packet__ng_pkt(void);
extern void test_transports_smart_packet__unpack_pkt(void);
extern void test_transports_smart_packet__ref_pkt(void);
extern void test_win32_forbidden__can_open_index(void);
extern void test_win32_forbidden__can_add_forbidden_filename_with_entry(void);
extern void test_win32_forbidden__cannot_add_dot_git_even_with_entry(void);
extern void test_win32_forbidden__cannot_add_forbidden_filename_from_filesystem(void);
extern void test_win32_forbidden__can_diff_tree_to_index(void);
extern void test_win32_forbidden__can_diff_tree_to_tree(void);
extern void test_win32_forbidden__can_diff_index_to_workdir(void);
extern void test_win32_forbidden__checking_out_forbidden_index_fails(void);
extern void test_win32_forbidden__can_query_submodules(void);
extern void test_win32_forbidden__can_blame_file(void);
extern void test_win32_forbidden__initialize(void);
extern void test_win32_forbidden__cleanup(void);
extern void test_win32_longpath__errmsg_on_checkout(void);
extern void test_win32_longpath__workdir_path_validated(void);
extern void test_win32_longpath__status_and_add(void);
extern void test_win32_longpath__status_and_add_with_filter(void);
extern void test_win32_longpath__initialize(void);
extern void test_win32_longpath__cleanup(void);
extern void test_win32_systemdir__finds_etc_in_path(void);
extern void test_win32_systemdir__finds_mingw64_etc_in_path(void);
extern void test_win32_systemdir__prefers_etc_to_mingw64_in_path(void);
extern void test_win32_systemdir__finds_etc_in_registry(void);
extern void test_win32_systemdir__finds_mingw64_etc_in_registry(void);
extern void test_win32_systemdir__prefers_etc_to_mingw64_in_registry(void);
extern void test_win32_systemdir__prefers_path_to_registry(void);
extern void test_win32_systemdir__no_git_installed(void);
extern void test_win32_systemdir__initialize(void);
extern void test_win32_systemdir__cleanup(void);
extern void test_worktree_bare__list(void);
extern void test_worktree_bare__add(void);
extern void test_worktree_bare__repository_path(void);
extern void test_worktree_bare__initialize(void);
extern void test_worktree_bare__cleanup(void);
extern void test_worktree_config__open(void);
extern void test_worktree_config__set_level_local(void);
extern void test_worktree_config__requires_extension(void);
extern void test_worktree_config__exists(void);
extern void test_worktree_config__set_level_worktree(void);
extern void test_worktree_config__initialize(void);
extern void test_worktree_config__cleanup(void);
extern void test_worktree_merge__merge_head(void);
extern void test_worktree_merge__merge_setup(void);
extern void test_worktree_merge__merge_conflict(void);
extern void test_worktree_merge__initialize(void);
extern void test_worktree_merge__cleanup(void);
extern void test_worktree_open__repository(void);
extern void test_worktree_open__repository_through_workdir(void);
extern void test_worktree_open__repository_through_gitlink(void);
extern void test_worktree_open__repository_through_gitdir(void);
extern void test_worktree_open__open_discovered_worktree(void);
extern void test_worktree_open__repository_with_nonexistent_parent(void);
extern void test_worktree_open__open_from_repository(void);
extern void test_worktree_open__open_from_nonworktree_fails(void);
extern void test_worktree_open__initialize(void);
extern void test_worktree_open__cleanup(void);
extern void test_worktree_reflog__read_worktree_HEAD(void);
extern void test_worktree_reflog__read_parent_HEAD(void);
extern void test_worktree_reflog__read(void);
extern void test_worktree_reflog__append_then_read(void);
extern void test_worktree_reflog__initialize(void);
extern void test_worktree_reflog__cleanup(void);
extern void test_worktree_refs__list_no_difference_in_worktree(void);
extern void test_worktree_refs__list_worktree_specific(void);
extern void test_worktree_refs__list_worktree_specific_hidden_in_main_repo(void);
extern void test_worktree_refs__read_head(void);
extern void test_worktree_refs__set_head_fails_when_worktree_wants_linked_repos_HEAD(void);
extern void test_worktree_refs__set_head_fails_when_main_repo_wants_worktree_head(void);
extern void test_worktree_refs__set_head_works_for_current_HEAD(void);
extern void test_worktree_refs__set_head_fails_when_already_checked_out(void);
extern void test_worktree_refs__delete_fails_for_checked_out_branch(void);
extern void test_worktree_refs__delete_succeeds_after_pruning_worktree(void);
extern void test_worktree_refs__delete_unrelated_branch_on_worktree(void);
extern void test_worktree_refs__delete_unrelated_branch_on_parent(void);
extern void test_worktree_refs__renaming_reference_updates_worktree_heads(void);
extern void test_worktree_refs__creating_refs_uses_commondir(void);
extern void test_worktree_refs__initialize(void);
extern void test_worktree_refs__cleanup(void);
extern void test_worktree_repository__head(void);
extern void test_worktree_repository__head_fails_for_invalid_worktree(void);
extern void test_worktree_repository__head_detached(void);
extern void test_worktree_repository__head_detached_fails_for_invalid_worktree(void);
extern void test_worktree_repository__initialize(void);
extern void test_worktree_repository__cleanup(void);
extern void test_worktree_submodule__submodule_worktree_parent(void);
extern void test_worktree_submodule__submodule_worktree_child(void);
extern void test_worktree_submodule__open_discovered_submodule_worktree(void);
extern void test_worktree_submodule__resolve_relative_url(void);
extern void test_worktree_submodule__initialize(void);
extern void test_worktree_submodule__cleanup(void);
extern void test_worktree_worktree__list(void);
extern void test_worktree_worktree__list_with_invalid_worktree_dirs(void);
extern void test_worktree_worktree__list_in_worktree_repo(void);
extern void test_worktree_worktree__list_without_worktrees(void);
extern void test_worktree_worktree__lookup(void);
extern void test_worktree_worktree__lookup_nonexistent_worktree(void);
extern void test_worktree_worktree__open(void);
extern void test_worktree_worktree__open_invalid_commondir(void);
extern void test_worktree_worktree__open_invalid_gitdir(void);
extern void test_worktree_worktree__open_invalid_parent(void);
extern void test_worktree_worktree__init(void);
extern void test_worktree_worktree__add_remove_add(void);
extern void test_worktree_worktree__add_locked(void);
extern void test_worktree_worktree__init_existing_branch(void);
extern void test_worktree_worktree__add_with_explicit_branch(void);
extern void test_worktree_worktree__add_no_checkout(void);
extern void test_worktree_worktree__init_existing_worktree(void);
extern void test_worktree_worktree__init_existing_path(void);
extern void test_worktree_worktree__init_submodule(void);
extern void test_worktree_worktree__validate(void);
extern void test_worktree_worktree__name(void);
extern void test_worktree_worktree__path(void);
extern void test_worktree_worktree__validate_invalid_commondir(void);
extern void test_worktree_worktree__validate_invalid_gitdir(void);
extern void test_worktree_worktree__validate_invalid_parent(void);
extern void test_worktree_worktree__lock_with_reason(void);
extern void test_worktree_worktree__lock_without_reason(void);
extern void test_worktree_worktree__unlock_unlocked_worktree(void);
extern void test_worktree_worktree__unlock_locked_worktree(void);
extern void test_worktree_worktree__prune_without_opts_fails(void);
extern void test_worktree_worktree__prune_valid(void);
extern void test_worktree_worktree__prune_locked(void);
extern void test_worktree_worktree__prune_gitdir_only(void);
extern void test_worktree_worktree__prune_worktree(void);
extern void test_worktree_worktree__foreach_worktree_lists_all_worktrees(void);
extern void test_worktree_worktree__validate_invalid_worktreedir(void);
extern void test_worktree_worktree__is_prunable_missing_repo(void);
extern void test_worktree_worktree__initialize(void);
extern void test_worktree_worktree__cleanup(void);
#endif
